
DRIVERS_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000029ea  00002a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800092  00800092  00002ab0  2**0
                  ALLOC
  3 .stab         00002d78  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023b2  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 13 	call	0x2668	; 0x2668 <main>
      8a:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_ErrStateSetPinDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include"../../SERVES/std_macros.h"

ErrState  DIO_ErrStateSetPinDirection(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_ErrStateSetPinDirection+0x22>
     b66:	f6 c0       	rjmp	.+492    	; 0xd54 <DIO_ErrStateSetPinDirection+0x20e>
	{
		/*Input-> write Zero DDR (CLR) */
		if (Copy_DirectionState == DIO_Input )
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	88 23       	and	r24, r24
     b6c:	09 f0       	breq	.+2      	; 0xb70 <DIO_ErrStateSetPinDirection+0x2a>
     b6e:	77 c0       	rjmp	.+238    	; 0xc5e <DIO_ErrStateSetPinDirection+0x118>
		{
			switch(Copy_GroupNumber){
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	38 87       	std	Y+8, r19	; 0x08
     b78:	2f 83       	std	Y+7, r18	; 0x07
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	59 f1       	breq	.+86     	; 0xbda <DIO_ErrStateSetPinDirection+0x94>
     b84:	2f 81       	ldd	r18, Y+7	; 0x07
     b86:	38 85       	ldd	r19, Y+8	; 0x08
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	2c f4       	brge	.+10     	; 0xb98 <DIO_ErrStateSetPinDirection+0x52>
     b8e:	8f 81       	ldd	r24, Y+7	; 0x07
     b90:	98 85       	ldd	r25, Y+8	; 0x08
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	69 f0       	breq	.+26     	; 0xbb0 <DIO_ErrStateSetPinDirection+0x6a>
     b96:	60 c0       	rjmp	.+192    	; 0xc58 <DIO_ErrStateSetPinDirection+0x112>
     b98:	2f 81       	ldd	r18, Y+7	; 0x07
     b9a:	38 85       	ldd	r19, Y+8	; 0x08
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	89 f1       	breq	.+98     	; 0xc04 <DIO_ErrStateSetPinDirection+0xbe>
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	98 85       	ldd	r25, Y+8	; 0x08
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <DIO_ErrStateSetPinDirection+0x68>
     bac:	40 c0       	rjmp	.+128    	; 0xc2e <DIO_ErrStateSetPinDirection+0xe8>
     bae:	54 c0       	rjmp	.+168    	; 0xc58 <DIO_ErrStateSetPinDirection+0x112>
			/*Group A*/
			case DIO_GroupA : Clr_Bit(DDRA_ITI , Copy_PinNumber ) ;break ;
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_ErrStateSetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_ErrStateSetPinDirection+0x84>
     bd2:	80 95       	com	r24
     bd4:	84 23       	and	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	bb c0       	rjmp	.+374    	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB: Clr_Bit(DDRB_ITI , Copy_PinNumber ) ;break ;
     bda:	a7 e3       	ldi	r26, 0x37	; 55
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e3       	ldi	r30, 0x37	; 55
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_ErrStateSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_ErrStateSetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	a6 c0       	rjmp	.+332    	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : Clr_Bit(DDRC_ITI , Copy_PinNumber ) ;break ;
     c04:	a4 e3       	ldi	r26, 0x34	; 52
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e4 e3       	ldi	r30, 0x34	; 52
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_ErrStateSetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_ErrStateSetPinDirection+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	91 c0       	rjmp	.+290    	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : Clr_Bit(DDRD_ITI , Copy_PinNumber ) ;break ;
     c2e:	a1 e3       	ldi	r26, 0x31	; 49
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e1 e3       	ldi	r30, 0x31	; 49
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_ErrStateSetPinDirection+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_ErrStateSetPinDirection+0x102>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	7c c0       	rjmp	.+248    	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	7d c0       	rjmp	.+250    	; 0xd58 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		/*Output -> write DDR = one */
		else if (Copy_DirectionState == DIO_Output )
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <DIO_ErrStateSetPinDirection+0x120>
     c64:	72 c0       	rjmp	.+228    	; 0xd4a <DIO_ErrStateSetPinDirection+0x204>
		{
			switch(Copy_GroupNumber){
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3d 83       	std	Y+5, r19	; 0x05
     c6e:	2c 83       	std	Y+4, r18	; 0x04
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	91 05       	cpc	r25, r1
     c78:	49 f1       	breq	.+82     	; 0xccc <DIO_ErrStateSetPinDirection+0x186>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	2c f4       	brge	.+10     	; 0xc8e <DIO_ErrStateSetPinDirection+0x148>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	61 f0       	breq	.+24     	; 0xca4 <DIO_ErrStateSetPinDirection+0x15e>
     c8c:	5b c0       	rjmp	.+182    	; 0xd44 <DIO_ErrStateSetPinDirection+0x1fe>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	71 f1       	breq	.+92     	; 0xcf4 <DIO_ErrStateSetPinDirection+0x1ae>
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	91 05       	cpc	r25, r1
     ca0:	e9 f1       	breq	.+122    	; 0xd1c <DIO_ErrStateSetPinDirection+0x1d6>
     ca2:	50 c0       	rjmp	.+160    	; 0xd44 <DIO_ErrStateSetPinDirection+0x1fe>
			/*Group A*/
			case DIO_GroupA : Set_Bit(DDRA_ITI,Copy_PinNumber);break;
     ca4:	aa e3       	ldi	r26, 0x3A	; 58
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_ErrStateSetPinDirection+0x17c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_ErrStateSetPinDirection+0x178>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group B*/
			case DIO_GroupB : Set_Bit(DDRB_ITI,Copy_PinNumber);break;
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_ErrStateSetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_ErrStateSetPinDirection+0x1a0>
     cee:	84 2b       	or	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	2e c0       	rjmp	.+92     	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group C*/
			case DIO_GroupC : Set_Bit(DDRC_ITI,Copy_PinNumber);break;
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_ErrStateSetPinDirection+0x1cc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_ErrStateSetPinDirection+0x1c8>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	1a c0       	rjmp	.+52     	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Group D*/
			case DIO_GroupD : Set_Bit(DDRD_ITI,Copy_PinNumber);break;
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_ErrStateSetPinDirection+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_ErrStateSetPinDirection+0x1f0>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <DIO_ErrStateSetPinDirection+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <DIO_ErrStateSetPinDirection+0x212>
			}
		}

		else
		{
			return DirectionError ;
     d4a:	23 e0       	ldi	r18, 0x03	; 3
     d4c:	2e 83       	std	Y+6, r18	; 0x06
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <DIO_ErrStateSetPinDirection+0x212>
		}

		return NoError ;
     d50:	1e 82       	std	Y+6, r1	; 0x06
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_ErrStateSetPinDirection+0x212>
	}
	else
	{
		return PinNumberError ;
     d54:	32 e0       	ldi	r19, 0x02	; 2
     d56:	3e 83       	std	Y+6, r19	; 0x06
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     d5a:	28 96       	adiw	r28, 0x08	; 8
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <DIO_ErrStateSetPinValue>:

ErrState  DIO_ErrStateSetPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber,DIO_ValueState Copy_ValueState)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	28 97       	sbiw	r28, 0x08	; 8
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	6a 83       	std	Y+2, r22	; 0x02
     d84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber<=Pin7 && Copy_PinNumber>=Pin0)
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <DIO_ErrStateSetPinValue+0x22>
     d8c:	f6 c0       	rjmp	.+492    	; 0xf7a <DIO_ErrStateSetPinValue+0x20e>
	{
		/*Low-> write Zero Port (CLR) */
		if (Copy_ValueState == DIO_Low )
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_ErrStateSetPinValue+0x2a>
     d94:	77 c0       	rjmp	.+238    	; 0xe84 <DIO_ErrStateSetPinValue+0x118>
		{
			switch(Copy_GroupNumber){
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	38 87       	std	Y+8, r19	; 0x08
     d9e:	2f 83       	std	Y+7, r18	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <DIO_ErrStateSetPinValue+0x94>
     daa:	2f 81       	ldd	r18, Y+7	; 0x07
     dac:	38 85       	ldd	r19, Y+8	; 0x08
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <DIO_ErrStateSetPinValue+0x52>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <DIO_ErrStateSetPinValue+0x6a>
     dbc:	60 c0       	rjmp	.+192    	; 0xe7e <DIO_ErrStateSetPinValue+0x112>
     dbe:	2f 81       	ldd	r18, Y+7	; 0x07
     dc0:	38 85       	ldd	r19, Y+8	; 0x08
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <DIO_ErrStateSetPinValue+0xbe>
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_ErrStateSetPinValue+0x68>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <DIO_ErrStateSetPinValue+0xe8>
     dd4:	54 c0       	rjmp	.+168    	; 0xe7e <DIO_ErrStateSetPinValue+0x112>
			/*Group A*/
			case DIO_GroupA : Clr_Bit(PORTA_ITI , Copy_PinNumber ) ;break ;
     dd6:	ab e3       	ldi	r26, 0x3B	; 59
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	eb e3       	ldi	r30, 0x3B	; 59
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_ErrStateSetPinValue+0x88>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_ErrStateSetPinValue+0x84>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	bb c0       	rjmp	.+374    	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB: Clr_Bit(PORTB_ITI , Copy_PinNumber ) ;break ;
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_ErrStateSetPinValue+0xb2>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_ErrStateSetPinValue+0xae>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	a6 c0       	rjmp	.+332    	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : Clr_Bit(PORTC_ITI , Copy_PinNumber ) ;break ;
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_ErrStateSetPinValue+0xdc>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_ErrStateSetPinValue+0xd8>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	91 c0       	rjmp	.+290    	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : Clr_Bit(PORTD_ITI , Copy_PinNumber ) ;break ;
     e54:	a2 e3       	ldi	r26, 0x32	; 50
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e2 e3       	ldi	r30, 0x32	; 50
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_ErrStateSetPinValue+0x106>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_ErrStateSetPinValue+0x102>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	7c c0       	rjmp	.+248    	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	7d c0       	rjmp	.+250    	; 0xf7e <DIO_ErrStateSetPinValue+0x212>
			}
		}

		/*High -> write port = one */
		else if (Copy_ValueState == DIO_High )
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <DIO_ErrStateSetPinValue+0x120>
     e8a:	72 c0       	rjmp	.+228    	; 0xf70 <DIO_ErrStateSetPinValue+0x204>
		{
			switch(Copy_GroupNumber){
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	49 f1       	breq	.+82     	; 0xef2 <DIO_ErrStateSetPinValue+0x186>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <DIO_ErrStateSetPinValue+0x148>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	61 f0       	breq	.+24     	; 0xeca <DIO_ErrStateSetPinValue+0x15e>
     eb2:	5b c0       	rjmp	.+182    	; 0xf6a <DIO_ErrStateSetPinValue+0x1fe>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	71 f1       	breq	.+92     	; 0xf1a <DIO_ErrStateSetPinValue+0x1ae>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	e9 f1       	breq	.+122    	; 0xf42 <DIO_ErrStateSetPinValue+0x1d6>
     ec8:	50 c0       	rjmp	.+160    	; 0xf6a <DIO_ErrStateSetPinValue+0x1fe>
			/*Group A*/
			case DIO_GroupA : Set_Bit(PORTA_ITI,Copy_PinNumber);break;
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_ErrStateSetPinValue+0x17c>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_ErrStateSetPinValue+0x178>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	42 c0       	rjmp	.+132    	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group B*/
			case DIO_GroupB : Set_Bit(PORTB_ITI,Copy_PinNumber);break;
     ef2:	a8 e3       	ldi	r26, 0x38	; 56
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e8 e3       	ldi	r30, 0x38	; 56
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_ErrStateSetPinValue+0x1a4>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_ErrStateSetPinValue+0x1a0>
     f14:	84 2b       	or	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	2e c0       	rjmp	.+92     	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group C*/
			case DIO_GroupC : Set_Bit(PORTC_ITI,Copy_PinNumber);break;
     f1a:	a5 e3       	ldi	r26, 0x35	; 53
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_ErrStateSetPinValue+0x1cc>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_ErrStateSetPinValue+0x1c8>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	1a c0       	rjmp	.+52     	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Group D*/
			case DIO_GroupD : Set_Bit(PORTD_ITI,Copy_PinNumber);break;
     f42:	a2 e3       	ldi	r26, 0x32	; 50
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e2 e3       	ldi	r30, 0x32	; 50
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_ErrStateSetPinValue+0x1f4>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_ErrStateSetPinValue+0x1f0>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <DIO_ErrStateSetPinValue+0x20a>
			/*Wrong*/
			default:
				return GroupError ;
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <DIO_ErrStateSetPinValue+0x212>
			}
		}

		else
		{
			return DirectionError ;
     f70:	23 e0       	ldi	r18, 0x03	; 3
     f72:	2e 83       	std	Y+6, r18	; 0x06
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <DIO_ErrStateSetPinValue+0x212>
		}

		return NoError ;
     f76:	1e 82       	std	Y+6, r1	; 0x06
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_ErrStateSetPinValue+0x212>
	}
	else
	{
		return PinNumberError ;
     f7a:	32 e0       	ldi	r19, 0x02	; 2
     f7c:	3e 83       	std	Y+6, r19	; 0x06
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
	}

}
     f80:	28 96       	adiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <DIO_ErrStateReadPinValue>:

ErrState  DIO_ErrStateReadPinValue(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber ,u8 *Result)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	27 97       	sbiw	r28, 0x07	; 7
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	6a 83       	std	Y+2, r22	; 0x02
     faa:	5c 83       	std	Y+4, r21	; 0x04
     fac:	4b 83       	std	Y+3, r20	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <DIO_ErrStateReadPinValue+0x24>
     fb4:	76 c0       	rjmp	.+236    	; 0x10a2 <DIO_ErrStateReadPinValue+0x110>
	{
		switch(Copy_GroupNumber)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3f 83       	std	Y+7, r19	; 0x07
     fbe:	2e 83       	std	Y+6, r18	; 0x06
     fc0:	4e 81       	ldd	r20, Y+6	; 0x06
     fc2:	5f 81       	ldd	r21, Y+7	; 0x07
     fc4:	41 30       	cpi	r20, 0x01	; 1
     fc6:	51 05       	cpc	r21, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_ErrStateReadPinValue+0x8e>
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	9f 81       	ldd	r25, Y+7	; 0x07
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	34 f4       	brge	.+12     	; 0xfe0 <DIO_ErrStateReadPinValue+0x4e>
     fd4:	2e 81       	ldd	r18, Y+6	; 0x06
     fd6:	3f 81       	ldd	r19, Y+7	; 0x07
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	69 f0       	breq	.+26     	; 0xff8 <DIO_ErrStateReadPinValue+0x66>
     fde:	5c c0       	rjmp	.+184    	; 0x1098 <DIO_ErrStateReadPinValue+0x106>
     fe0:	4e 81       	ldd	r20, Y+6	; 0x06
     fe2:	5f 81       	ldd	r21, Y+7	; 0x07
     fe4:	42 30       	cpi	r20, 0x02	; 2
     fe6:	51 05       	cpc	r21, r1
     fe8:	79 f1       	breq	.+94     	; 0x1048 <DIO_ErrStateReadPinValue+0xb6>
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_ErrStateReadPinValue+0x64>
     ff4:	3d c0       	rjmp	.+122    	; 0x1070 <DIO_ErrStateReadPinValue+0xde>
     ff6:	50 c0       	rjmp	.+160    	; 0x1098 <DIO_ErrStateReadPinValue+0x106>
		{
		case DIO_GroupA: *Result=Get_Bit(PINA_ITI,Copy_PinNumber); break ;
     ff8:	e9 e3       	ldi	r30, 0x39	; 57
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a9 01       	movw	r20, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_ErrStateReadPinValue+0x7e>
    100c:	55 95       	asr	r21
    100e:	47 95       	ror	r20
    1010:	8a 95       	dec	r24
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_ErrStateReadPinValue+0x7a>
    1014:	ca 01       	movw	r24, r20
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	eb 81       	ldd	r30, Y+3	; 0x03
    101a:	fc 81       	ldd	r31, Y+4	; 0x04
    101c:	80 83       	st	Z, r24
    101e:	3f c0       	rjmp	.+126    	; 0x109e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupB: *Result=Get_Bit(PINB_ITI,Copy_PinNumber); break ;
    1020:	e6 e3       	ldi	r30, 0x36	; 54
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_ErrStateReadPinValue+0xa6>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_ErrStateReadPinValue+0xa2>
    103c:	ca 01       	movw	r24, r20
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	eb 81       	ldd	r30, Y+3	; 0x03
    1042:	fc 81       	ldd	r31, Y+4	; 0x04
    1044:	80 83       	st	Z, r24
    1046:	2b c0       	rjmp	.+86     	; 0x109e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupC: *Result=Get_Bit(PINC_ITI,Copy_PinNumber); break ;
    1048:	e3 e3       	ldi	r30, 0x33	; 51
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a9 01       	movw	r20, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_ErrStateReadPinValue+0xce>
    105c:	55 95       	asr	r21
    105e:	47 95       	ror	r20
    1060:	8a 95       	dec	r24
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_ErrStateReadPinValue+0xca>
    1064:	ca 01       	movw	r24, r20
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	eb 81       	ldd	r30, Y+3	; 0x03
    106a:	fc 81       	ldd	r31, Y+4	; 0x04
    106c:	80 83       	st	Z, r24
    106e:	17 c0       	rjmp	.+46     	; 0x109e <DIO_ErrStateReadPinValue+0x10c>
		case DIO_GroupD: *Result=Get_Bit(PIND_ITI,Copy_PinNumber); break ;
    1070:	e0 e3       	ldi	r30, 0x30	; 48
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a9 01       	movw	r20, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_ErrStateReadPinValue+0xf6>
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_ErrStateReadPinValue+0xf2>
    108c:	ca 01       	movw	r24, r20
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	eb 81       	ldd	r30, Y+3	; 0x03
    1092:	fc 81       	ldd	r31, Y+4	; 0x04
    1094:	80 83       	st	Z, r24
    1096:	03 c0       	rjmp	.+6      	; 0x109e <DIO_ErrStateReadPinValue+0x10c>
		default:
			return GroupError ;
    1098:	51 e0       	ldi	r21, 0x01	; 1
    109a:	5d 83       	std	Y+5, r21	; 0x05
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <DIO_ErrStateReadPinValue+0x114>
		}
		return NoError ;
    109e:	1d 82       	std	Y+5, r1	; 0x05
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_ErrStateReadPinValue+0x114>
	}
	else
	{
		return PinNumberError ;
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    10a8:	27 96       	adiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_ErrStateSetGroupDirection>:




ErrState  DIO_ErrStateSetGroupDirection(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_DirectionState)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_ErrStateSetGroupDirection+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_ErrStateSetGroupDirection+0x8>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_DirectionState <= 0xff && Copy_DirectionState>=0x00)
	{
		switch(Copy_GroupNumber)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	d1 f0       	breq	.+52     	; 0x1114 <DIO_ErrStateSetGroupDirection+0x5a>
    10e0:	2c 81       	ldd	r18, Y+4	; 0x04
    10e2:	3d 81       	ldd	r19, Y+5	; 0x05
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_ErrStateSetGroupDirection+0x3a>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_ErrStateSetGroupDirection+0x50>
    10f2:	1f c0       	rjmp	.+62     	; 0x1132 <DIO_ErrStateSetGroupDirection+0x78>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	81 f0       	breq	.+32     	; 0x111e <DIO_ErrStateSetGroupDirection+0x64>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_ErrStateSetGroupDirection+0x6e>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <DIO_ErrStateSetGroupDirection+0x78>
		{
		case DIO_GroupA: DDRA_ITI =  Copy_DirectionState ;break ;
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupB: DDRB_ITI =  Copy_DirectionState ;break ;
    1114:	e7 e3       	ldi	r30, 0x37	; 55
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 83       	st	Z, r24
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupC: DDRC_ITI =  Copy_DirectionState ;break ;
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <DIO_ErrStateSetGroupDirection+0x7e>
		case DIO_GroupD: DDRD_ITI =  Copy_DirectionState ;break ;
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <DIO_ErrStateSetGroupDirection+0x7e>
		default :
			return GroupError ;
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	01 c0       	rjmp	.+2      	; 0x113a <DIO_ErrStateSetGroupDirection+0x80>
		}
		return NoError ;
    1138:	1b 82       	std	Y+3, r1	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DirectionRangError;
	}
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <DIO_ErrStateSetGroupValue>:
ErrState  DIO_ErrStateSetGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 Copy_ValueState)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_ErrStateSetGroupValue+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_ErrStateSetGroupValue+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState <= 0xff && Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3d 83       	std	Y+5, r19	; 0x05
    1166:	2c 83       	std	Y+4, r18	; 0x04
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <DIO_ErrStateSetGroupValue+0x5a>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <DIO_ErrStateSetGroupValue+0x3a>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <DIO_ErrStateSetGroupValue+0x50>
    1184:	1f c0       	rjmp	.+62     	; 0x11c4 <DIO_ErrStateSetGroupValue+0x78>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <DIO_ErrStateSetGroupValue+0x64>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <DIO_ErrStateSetGroupValue+0x6e>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: PORTA_ITI =  Copy_ValueState ;break ;
    119c:	eb e3       	ldi	r30, 0x3B	; 59
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	12 c0       	rjmp	.+36     	; 0x11ca <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: PORTB_ITI =  Copy_ValueState ;break ;
    11a6:	e8 e3       	ldi	r30, 0x38	; 56
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: PORTC_ITI =  Copy_ValueState ;break ;
    11b0:	e5 e3       	ldi	r30, 0x35	; 53
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: PORTD_ITI =  Copy_ValueState ;break ;
    11ba:	e2 e3       	ldi	r30, 0x32	; 50
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <DIO_ErrStateSetGroupValue+0x7e>
		default :
			return GroupError ;
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	9b 83       	std	Y+3, r25	; 0x03
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError ;
    11ca:	1b 82       	std	Y+3, r1	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return ValueRangError;
	}

}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_ErrStateReadGroupValue>:
ErrState  DIO_ErrStateReadGroupValue(DIO_GroupNumber Copy_GroupNumber ,u8 *Result)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_ErrStateReadGroupValue+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_ErrStateReadGroupValue+0x8>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <DIO_ErrStateReadGroupValue+0xa>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	7b 83       	std	Y+3, r23	; 0x03
    11f0:	6a 83       	std	Y+2, r22	; 0x02
	if(Result!=Null)
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	9b 81       	ldd	r25, Y+3	; 0x03
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	09 f4       	brne	.+2      	; 0x11fc <DIO_ErrStateReadGroupValue+0x1e>
    11fa:	40 c0       	rjmp	.+128    	; 0x127c <DIO_ErrStateReadGroupValue+0x9e>
	{
		switch(Copy_GroupNumber)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3e 83       	std	Y+6, r19	; 0x06
    1204:	2d 83       	std	Y+5, r18	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	e1 f0       	breq	.+56     	; 0x1248 <DIO_ErrStateReadGroupValue+0x6a>
    1210:	2d 81       	ldd	r18, Y+5	; 0x05
    1212:	3e 81       	ldd	r19, Y+6	; 0x06
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <DIO_ErrStateReadGroupValue+0x46>
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	9e 81       	ldd	r25, Y+6	; 0x06
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <DIO_ErrStateReadGroupValue+0x5c>
    1222:	27 c0       	rjmp	.+78     	; 0x1272 <DIO_ErrStateReadGroupValue+0x94>
    1224:	2d 81       	ldd	r18, Y+5	; 0x05
    1226:	3e 81       	ldd	r19, Y+6	; 0x06
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	a1 f0       	breq	.+40     	; 0x1256 <DIO_ErrStateReadGroupValue+0x78>
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	b1 f0       	breq	.+44     	; 0x1264 <DIO_ErrStateReadGroupValue+0x86>
    1238:	1c c0       	rjmp	.+56     	; 0x1272 <DIO_ErrStateReadGroupValue+0x94>
		{
		case DIO_GroupA: *Result = PINA_ITI ; break ;
    123a:	e9 e3       	ldi	r30, 0x39	; 57
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	ea 81       	ldd	r30, Y+2	; 0x02
    1242:	fb 81       	ldd	r31, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
    1246:	18 c0       	rjmp	.+48     	; 0x1278 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupB: *Result = PINB_ITI ; break ;
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	ea 81       	ldd	r30, Y+2	; 0x02
    1250:	fb 81       	ldd	r31, Y+3	; 0x03
    1252:	80 83       	st	Z, r24
    1254:	11 c0       	rjmp	.+34     	; 0x1278 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupC: *Result = PINC_ITI ; break ;
    1256:	e3 e3       	ldi	r30, 0x33	; 51
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	80 83       	st	Z, r24
    1262:	0a c0       	rjmp	.+20     	; 0x1278 <DIO_ErrStateReadGroupValue+0x9a>
		case DIO_GroupD: *Result = PIND_ITI ; break ;
    1264:	e0 e3       	ldi	r30, 0x30	; 48
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	ea 81       	ldd	r30, Y+2	; 0x02
    126c:	fb 81       	ldd	r31, Y+3	; 0x03
    126e:	80 83       	st	Z, r24
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <DIO_ErrStateReadGroupValue+0x9a>
		default :
			return GroupError ;
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <DIO_ErrStateReadGroupValue+0xa2>
		}
		return NoError ;
    1278:	1c 82       	std	Y+4, r1	; 0x04
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_ErrStateReadGroupValue+0xa2>
	}
	else
	{
		return AddressError;
    127c:	25 e0       	ldi	r18, 0x05	; 5
    127e:	2c 83       	std	Y+4, r18	; 0x04
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1282:	26 96       	adiw	r28, 0x06	; 6
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_ErrStateReadPinValuekey>:

u8  DIO_ErrStateReadPinValuekey(DIO_GroupNumber Copy_GroupNumber ,DIO_PinNumber Copy_PinNumber )
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_ErrStateReadPinValuekey+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_ErrStateReadPinValuekey+0x8>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_ErrStateReadPinValuekey+0xa>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8a 83       	std	Y+2, r24	; 0x02
    12a4:	6b 83       	std	Y+3, r22	; 0x03
	/*check on pin range from 0 to 7 */
	if (Copy_PinNumber>= Pin0 && Copy_PinNumber <=Pin7)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <DIO_ErrStateReadPinValuekey+0x1a>
    12ac:	6c c0       	rjmp	.+216    	; 0x1386 <DIO_ErrStateReadPinValuekey+0xf2>
	{ u8 Result=0;
    12ae:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_GroupNumber)
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3d 83       	std	Y+5, r19	; 0x05
    12b8:	2c 83       	std	Y+4, r18	; 0x04
    12ba:	4c 81       	ldd	r20, Y+4	; 0x04
    12bc:	5d 81       	ldd	r21, Y+5	; 0x05
    12be:	41 30       	cpi	r20, 0x01	; 1
    12c0:	51 05       	cpc	r21, r1
    12c2:	41 f1       	breq	.+80     	; 0x1314 <DIO_ErrStateReadPinValuekey+0x80>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	91 05       	cpc	r25, r1
    12cc:	34 f4       	brge	.+12     	; 0x12da <DIO_ErrStateReadPinValuekey+0x46>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	21 15       	cp	r18, r1
    12d4:	31 05       	cpc	r19, r1
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <DIO_ErrStateReadPinValuekey+0x5c>
    12d8:	52 c0       	rjmp	.+164    	; 0x137e <DIO_ErrStateReadPinValuekey+0xea>
    12da:	4c 81       	ldd	r20, Y+4	; 0x04
    12dc:	5d 81       	ldd	r21, Y+5	; 0x05
    12de:	42 30       	cpi	r20, 0x02	; 2
    12e0:	51 05       	cpc	r21, r1
    12e2:	51 f1       	breq	.+84     	; 0x1338 <DIO_ErrStateReadPinValuekey+0xa4>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	b9 f1       	breq	.+110    	; 0x135c <DIO_ErrStateReadPinValuekey+0xc8>
    12ee:	47 c0       	rjmp	.+142    	; 0x137e <DIO_ErrStateReadPinValuekey+0xea>
		{
		case DIO_GroupA: Result=Get_Bit(PINA_ITI,Copy_PinNumber); break ;
    12f0:	e9 e3       	ldi	r30, 0x39	; 57
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_ErrStateReadPinValuekey+0x74>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_ErrStateReadPinValuekey+0x70>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	35 c0       	rjmp	.+106    	; 0x137e <DIO_ErrStateReadPinValuekey+0xea>
		case DIO_GroupB: Result=Get_Bit(PINB_ITI,Copy_PinNumber); break ;
    1314:	e6 e3       	ldi	r30, 0x36	; 54
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_ErrStateReadPinValuekey+0x98>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_ErrStateReadPinValuekey+0x94>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	23 c0       	rjmp	.+70     	; 0x137e <DIO_ErrStateReadPinValuekey+0xea>
		case DIO_GroupC: Result=Get_Bit(PINC_ITI,Copy_PinNumber); break ;
    1338:	e3 e3       	ldi	r30, 0x33	; 51
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_ErrStateReadPinValuekey+0xbc>
    134c:	55 95       	asr	r21
    134e:	47 95       	ror	r20
    1350:	8a 95       	dec	r24
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_ErrStateReadPinValuekey+0xb8>
    1354:	ca 01       	movw	r24, r20
    1356:	81 70       	andi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	11 c0       	rjmp	.+34     	; 0x137e <DIO_ErrStateReadPinValuekey+0xea>
		case DIO_GroupD: Result=Get_Bit(PIND_ITI,Copy_PinNumber); break ;
    135c:	e0 e3       	ldi	r30, 0x30	; 48
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_ErrStateReadPinValuekey+0xe0>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_ErrStateReadPinValuekey+0xdc>
    1378:	ca 01       	movw	r24, r20
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01

		}
		return Result ;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	8e 83       	std	Y+6, r24	; 0x06
	}

}
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <DIO_ErrStateReadPinValuekey+0xf2>
    1386:	26 96       	adiw	r28, 0x06	; 6
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <SW_ErrStateSetState>:
#include "Switch_Interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Switch_Configuration.h"
SwitchErrState  SW_ErrStateSetState(Switch_Info * Switch)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <SW_ErrStateSetState+0x6>
    139e:	0f 92       	push	r0
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_Input);
    13a8:	e9 81       	ldd	r30, Y+1	; 0x01
    13aa:	fa 81       	ldd	r31, Y+2	; 0x02
    13ac:	80 81       	ld	r24, Z
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	69 2f       	mov	r22, r25
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	if(Switch->ConnectionType == InternalPullUp)
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	88 23       	and	r24, r24
    13c4:	61 f4       	brne	.+24     	; 0x13de <SW_ErrStateSetState+0x46>
	{
		DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_High);
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	80 81       	ld	r24, Z
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	69 2f       	mov	r22, r25
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		return NOSWITCHERRPR;
    13da:	1b 82       	std	Y+3, r1	; 0x03
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <SW_ErrStateSetState+0x4a>
	}
	return ERRORSWITCH;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <SW_SwitchErrStateGetState>:
SwitchErrState SW_SwitchErrStateGetState(Switch_Info * Switch ,RS_info * Result)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	27 97       	sbiw	r28, 0x07	; 7
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	7d 83       	std	Y+5, r23	; 0x05
    140a:	6c 83       	std	Y+4, r22	; 0x04
	u8 SwitchRead;
	DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&SwitchRead);
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	80 81       	ld	r24, Z
    1412:	ea 81       	ldd	r30, Y+2	; 0x02
    1414:	fb 81       	ldd	r31, Y+3	; 0x03
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	69 2f       	mov	r22, r25
    141a:	9e 01       	movw	r18, r28
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	a9 01       	movw	r20, r18
    1422:	0e 94 c9 07 	call	0xf92	; 0xf92 <DIO_ErrStateReadPinValue>
	if(SwitchRead == PressedPullUp)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	88 23       	and	r24, r24
    142a:	61 f4       	brne	.+24     	; 0x1444 <SW_SwitchErrStateGetState+0x54>
	{
		DIO_ErrStateSetPinValue(Result->RS_Group,Result->RS_Pin,DIO_High);
    142c:	ec 81       	ldd	r30, Y+4	; 0x04
    142e:	fd 81       	ldd	r31, Y+5	; 0x05
    1430:	80 81       	ld	r24, Z
    1432:	ec 81       	ldd	r30, Y+4	; 0x04
    1434:	fd 81       	ldd	r31, Y+5	; 0x05
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	69 2f       	mov	r22, r25
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		return NOSWITCHERRPR;
    1440:	1e 82       	std	Y+6, r1	; 0x06
    1442:	10 c0       	rjmp	.+32     	; 0x1464 <SW_SwitchErrStateGetState+0x74>
	}
	else if(SwitchRead == NotPressedPullUp)
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	61 f4       	brne	.+24     	; 0x1462 <SW_SwitchErrStateGetState+0x72>
	{
		DIO_ErrStateSetPinValue(Result->RS_Group,Result->RS_Pin,DIO_Low);
    144a:	ec 81       	ldd	r30, Y+4	; 0x04
    144c:	fd 81       	ldd	r31, Y+5	; 0x05
    144e:	80 81       	ld	r24, Z
    1450:	ec 81       	ldd	r30, Y+4	; 0x04
    1452:	fd 81       	ldd	r31, Y+5	; 0x05
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	69 2f       	mov	r22, r25
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		return NOSWITCHERRPR;
    145e:	1e 82       	std	Y+6, r1	; 0x06
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <SW_SwitchErrStateGetState+0x74>
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <SW_SwitchErrStateGetState+0x78>
	}
}
    1464:	8e 81       	ldd	r24, Y+6	; 0x06
    1466:	8f 83       	std	Y+7, r24	; 0x07
    1468:	8f 81       	ldd	r24, Y+7	; 0x07
    146a:	27 96       	adiw	r28, 0x07	; 7
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <SevSeg_SevErrStateSetNumber>:
#include"SevSeg_Private.h"



SevErrState    SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info * SevenSegment1)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <SevSeg_SevErrStateSetNumber+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <SevSeg_SevErrStateSetNumber+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	7b 83       	std	Y+3, r23	; 0x03
    148c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
    148e:	ea 81       	ldd	r30, Y+2	; 0x02
    1490:	fb 81       	ldd	r31, Y+3	; 0x03
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_ErrStateSetGroupDirection>
	DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	ea 81       	ldd	r30, Y+2	; 0x02
    14a2:	fb 81       	ldd	r31, Y+3	; 0x03
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	69 2f       	mov	r22, r25
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	if(SevenSegment1->SevSeg_Type == Cathod)
    14ae:	ea 81       	ldd	r30, Y+2	; 0x02
    14b0:	fb 81       	ldd	r31, Y+3	; 0x03
    14b2:	80 81       	ld	r24, Z
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	89 f4       	brne	.+34     	; 0x14da <SevSeg_SevErrStateSetNumber+0x5e>
	{
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[Copy_Number]);
    14b8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ba:	fb 81       	ldd	r31, Y+3	; 0x03
    14bc:	21 81       	ldd	r18, Z+1	; 0x01
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	e0 59       	subi	r30, 0x90	; 144
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	90 81       	ld	r25, Z
    14cc:	82 2f       	mov	r24, r18
    14ce:	69 2f       	mov	r22, r25
    14d0:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
		return NOERROR;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	8c 83       	std	Y+4, r24	; 0x04
    14d8:	27 c0       	rjmp	.+78     	; 0x1528 <SevSeg_SevErrStateSetNumber+0xac>
	}
	else if(SevenSegment1->SevSeg_Type == Anode)
    14da:	ea 81       	ldd	r30, Y+2	; 0x02
    14dc:	fb 81       	ldd	r31, Y+3	; 0x03
    14de:	80 81       	ld	r24, Z
    14e0:	88 23       	and	r24, r24
    14e2:	09 f5       	brne	.+66     	; 0x1526 <SevSeg_SevErrStateSetNumber+0xaa>
	{
		DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
    14e4:	ea 81       	ldd	r30, Y+2	; 0x02
    14e6:	fb 81       	ldd	r31, Y+3	; 0x03
    14e8:	82 81       	ldd	r24, Z+2	; 0x02
    14ea:	6f ef       	ldi	r22, 0xFF	; 255
    14ec:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_ErrStateSetGroupDirection>
		DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	ea 81       	ldd	r30, Y+2	; 0x02
    14f8:	fb 81       	ldd	r31, Y+3	; 0x03
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	69 2f       	mov	r22, r25
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[Copy_Number]);
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	21 81       	ldd	r18, Z+1	; 0x01
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	e0 59       	subi	r30, 0x90	; 144
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	90 81       	ld	r25, Z
    1518:	82 2f       	mov	r24, r18
    151a:	69 2f       	mov	r22, r25
    151c:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
		return NOERROR;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	8c 83       	std	Y+4, r24	; 0x04
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <SevSeg_SevErrStateSetNumber+0xac>
	}
	return ERROR;
    1526:	1c 82       	std	Y+4, r1	; 0x04
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	62 97       	sbiw	r28, 0x12	; 18
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	98 8b       	std	Y+16, r25	; 0x10
    154e:	8f 87       	std	Y+15, r24	; 0x0f
    1550:	69 8b       	std	Y+17, r22	; 0x11
    1552:	4a 8b       	std	Y+18, r20	; 0x12
    1554:	93 c0       	rjmp	.+294    	; 0x167c <SevSeg_SevErrStateDisplayRange+0x144>
	while(Copy_start<=Copy_End)
	{
		DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
    1556:	ef 85       	ldd	r30, Y+15	; 0x0f
    1558:	f8 89       	ldd	r31, Y+16	; 0x10
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	6f ef       	ldi	r22, 0xFF	; 255
    155e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_ErrStateSetGroupDirection>
		DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
    1562:	ef 85       	ldd	r30, Y+15	; 0x0f
    1564:	f8 89       	ldd	r31, Y+16	; 0x10
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	ef 85       	ldd	r30, Y+15	; 0x0f
    156a:	f8 89       	ldd	r31, Y+16	; 0x10
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	69 2f       	mov	r22, r25
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[Copy_start++]);
    1576:	ef 85       	ldd	r30, Y+15	; 0x0f
    1578:	f8 89       	ldd	r31, Y+16	; 0x10
    157a:	21 81       	ldd	r18, Z+1	; 0x01
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	e0 59       	subi	r30, 0x90	; 144
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	90 81       	ld	r25, Z
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	89 8b       	std	Y+17, r24	; 0x11
    1590:	82 2f       	mov	r24, r18
    1592:	69 2f       	mov	r22, r25
    1594:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	aa e7       	ldi	r26, 0x7A	; 122
    159e:	b4 e4       	ldi	r27, 0x44	; 68
    15a0:	8b 87       	std	Y+11, r24	; 0x0b
    15a2:	9c 87       	std	Y+12, r25	; 0x0c
    15a4:	ad 87       	std	Y+13, r26	; 0x0d
    15a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4a ef       	ldi	r20, 0xFA	; 250
    15b6:	54 e4       	ldi	r21, 0x44	; 68
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	8f 83       	std	Y+7, r24	; 0x07
    15c2:	98 87       	std	Y+8, r25	; 0x08
    15c4:	a9 87       	std	Y+9, r26	; 0x09
    15c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ca:	78 85       	ldd	r23, Y+8	; 0x08
    15cc:	89 85       	ldd	r24, Y+9	; 0x09
    15ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	2c f4       	brge	.+10     	; 0x15ea <SevSeg_SevErrStateDisplayRange+0xb2>
		__ticks = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <SevSeg_SevErrStateDisplayRange+0x130>
	else if (__tmp > 65535)
    15ea:	6f 81       	ldd	r22, Y+7	; 0x07
    15ec:	78 85       	ldd	r23, Y+8	; 0x08
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	57 e4       	ldi	r21, 0x47	; 71
    15fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	4c f5       	brge	.+82     	; 0x1654 <SevSeg_SevErrStateDisplayRange+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	0f c0       	rjmp	.+30     	; 0x164a <SevSeg_SevErrStateDisplayRange+0x112>
    162c:	88 ec       	ldi	r24, 0xC8	; 200
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <SevSeg_SevErrStateDisplayRange+0x100>
    163c:	9c 83       	std	Y+4, r25	; 0x04
    163e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	69 f7       	brne	.-38     	; 0x162c <SevSeg_SevErrStateDisplayRange+0xf4>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <SevSeg_SevErrStateDisplayRange+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <SevSeg_SevErrStateDisplayRange+0x13c>
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	89 83       	std	Y+1, r24	; 0x01
	return ERROR;
}

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End )
{
	while(Copy_start<=Copy_End)
    167c:	99 89       	ldd	r25, Y+17	; 0x11
    167e:	8a 89       	ldd	r24, Y+18	; 0x12
    1680:	89 17       	cp	r24, r25
    1682:	08 f0       	brcs	.+2      	; 0x1686 <SevSeg_SevErrStateDisplayRange+0x14e>
    1684:	68 cf       	rjmp	.-304    	; 0x1556 <SevSeg_SevErrStateDisplayRange+0x1e>
		DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
		DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[Copy_start++]);
		_delay_ms(1000);
	}
	return NOERROR;
    1686:	81 e0       	ldi	r24, 0x01	; 1

}
    1688:	62 96       	adiw	r28, 0x12	; 18
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <SevSeg_SevErrStateDisplayMax>:

SevErrState    SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	61 97       	sbiw	r28, 0x11	; 17
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	99 8b       	std	Y+17, r25	; 0x11
    16b0:	88 8b       	std	Y+16, r24	; 0x10
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
    16b2:	e8 89       	ldd	r30, Y+16	; 0x10
    16b4:	f9 89       	ldd	r31, Y+17	; 0x11
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	6f ef       	ldi	r22, 0xFF	; 255
    16ba:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_ErrStateSetGroupDirection>
	DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
    16be:	e8 89       	ldd	r30, Y+16	; 0x10
    16c0:	f9 89       	ldd	r31, Y+17	; 0x11
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	e8 89       	ldd	r30, Y+16	; 0x10
    16c6:	f9 89       	ldd	r31, Y+17	; 0x11
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	69 2f       	mov	r22, r25
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	u8 count;
	for(count = 0 ;count<10;count++)
    16d2:	1f 86       	std	Y+15, r1	; 0x0f
    16d4:	83 c0       	rjmp	.+262    	; 0x17dc <SevSeg_SevErrStateDisplayMax+0x142>
	{
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[count]);
    16d6:	e8 89       	ldd	r30, Y+16	; 0x10
    16d8:	f9 89       	ldd	r31, Y+17	; 0x11
    16da:	21 81       	ldd	r18, Z+1	; 0x01
    16dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	fc 01       	movw	r30, r24
    16e4:	e0 59       	subi	r30, 0x90	; 144
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	90 81       	ld	r25, Z
    16ea:	82 2f       	mov	r24, r18
    16ec:	69 2f       	mov	r22, r25
    16ee:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	aa e7       	ldi	r26, 0x7A	; 122
    16f8:	b4 e4       	ldi	r27, 0x44	; 68
    16fa:	8b 87       	std	Y+11, r24	; 0x0b
    16fc:	9c 87       	std	Y+12, r25	; 0x0c
    16fe:	ad 87       	std	Y+13, r26	; 0x0d
    1700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	6b 85       	ldd	r22, Y+11	; 0x0b
    1704:	7c 85       	ldd	r23, Y+12	; 0x0c
    1706:	8d 85       	ldd	r24, Y+13	; 0x0d
    1708:	9e 85       	ldd	r25, Y+14	; 0x0e
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a ef       	ldi	r20, 0xFA	; 250
    1710:	54 e4       	ldi	r21, 0x44	; 68
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8f 83       	std	Y+7, r24	; 0x07
    171c:	98 87       	std	Y+8, r25	; 0x08
    171e:	a9 87       	std	Y+9, r26	; 0x09
    1720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <SevSeg_SevErrStateDisplayMax+0xaa>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <SevSeg_SevErrStateDisplayMax+0x128>
	else if (__tmp > 65535)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <SevSeg_SevErrStateDisplayMax+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	6b 85       	ldd	r22, Y+11	; 0x0b
    175e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1760:	8d 85       	ldd	r24, Y+13	; 0x0d
    1762:	9e 85       	ldd	r25, Y+14	; 0x0e
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <SevSeg_SevErrStateDisplayMax+0x10a>
    1786:	88 ec       	ldi	r24, 0xC8	; 200
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <SevSeg_SevErrStateDisplayMax+0xf8>
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <SevSeg_SevErrStateDisplayMax+0xec>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <SevSeg_SevErrStateDisplayMax+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <SevSeg_SevErrStateDisplayMax+0x134>
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
SevErrState    SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1)
{
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_EnablePort,0xff);
	DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_Low);
	u8 count;
	for(count = 0 ;count<10;count++)
    17d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17de:	8a 30       	cpi	r24, 0x0A	; 10
    17e0:	08 f4       	brcc	.+2      	; 0x17e4 <SevSeg_SevErrStateDisplayMax+0x14a>
    17e2:	79 cf       	rjmp	.-270    	; 0x16d6 <SevSeg_SevErrStateDisplayMax+0x3c>
	{
		DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group,SevSeg_Arr[count]);
		_delay_ms(1000);
	}
	return NOERROR;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
}
    17e6:	61 96       	adiw	r28, 0x11	; 17
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <Led_LedErrStateTurnOn>:
#include "../../SERVES/std_macros.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <Led_LedErrStateTurnOn+0x6>
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_Output);
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	80 81       	ld	r24, Z
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	69 2f       	mov	r22, r25
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	if(Led->ConnectionType==Source_Connection)
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	61 f4       	brne	.+24     	; 0x183e <Led_LedErrStateTurnOn+0x46>
	{		DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_High);
    1826:	e9 81       	ldd	r30, Y+1	; 0x01
    1828:	fa 81       	ldd	r31, Y+2	; 0x02
    182a:	80 81       	ld	r24, Z
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	69 2f       	mov	r22, r25
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
			return on;
    183a:	1b 82       	std	Y+3, r1	; 0x03
    183c:	13 c0       	rjmp	.+38     	; 0x1864 <Led_LedErrStateTurnOn+0x6c>
	}
	else if (Led->ConnectionType==Sink_Connection)
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	69 f4       	brne	.+26     	; 0x1862 <Led_LedErrStateTurnOn+0x6a>
	{	DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_Low);
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	80 81       	ld	r24, Z
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	69 2f       	mov	r22, r25
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
		return off;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <Led_LedErrStateTurnOn+0x6c>
	}

	else{
		return Errorcon;
    1862:	1b 82       	std	Y+3, r1	; 0x03
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <Led_LedErrStateTurnOff>:
LedErrState	Led_LedErrStateTurnOff(Led_info *Led)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <Led_LedErrStateTurnOff+0x6>
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
	DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_Output);
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	80 81       	ld	r24, Z
    1888:	e9 81       	ldd	r30, Y+1	; 0x01
    188a:	fa 81       	ldd	r31, Y+2	; 0x02
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	69 2f       	mov	r22, r25
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
		if(Led->ConnectionType==Source_Connection)
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	61 f4       	brne	.+24     	; 0x18b8 <Led_LedErrStateTurnOff+0x46>
		{		DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_High);
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	80 81       	ld	r24, Z
    18a6:	e9 81       	ldd	r30, Y+1	; 0x01
    18a8:	fa 81       	ldd	r31, Y+2	; 0x02
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	69 2f       	mov	r22, r25
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
				return on;
    18b4:	1b 82       	std	Y+3, r1	; 0x03
    18b6:	13 c0       	rjmp	.+38     	; 0x18de <Led_LedErrStateTurnOff+0x6c>
		}
		else if (Led->ConnectionType==Sink_Connection)
    18b8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ba:	fa 81       	ldd	r31, Y+2	; 0x02
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	69 f4       	brne	.+26     	; 0x18dc <Led_LedErrStateTurnOff+0x6a>
		{	DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_Low);
    18c2:	e9 81       	ldd	r30, Y+1	; 0x01
    18c4:	fa 81       	ldd	r31, Y+2	; 0x02
    18c6:	80 81       	ld	r24, Z
    18c8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ca:	fa 81       	ldd	r31, Y+2	; 0x02
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	69 2f       	mov	r22, r25
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
			return off;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	8b 83       	std	Y+3, r24	; 0x03
    18da:	01 c0       	rjmp	.+2      	; 0x18de <Led_LedErrStateTurnOff+0x6c>
		}

		else{
			return Errorcon;
    18dc:	1b 82       	std	Y+3, r1	; 0x03
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <Lcd_VoidSendCommand>:
#include "../../MCAL/DIO/DIO_Private.h"
#include "Lcd_Interface.h"


void Lcd_VoidSendCommand(u8 Copy_Command, Lcd_Info * Lcd)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	6f 97       	sbiw	r28, 0x1f	; 31
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	8d 8f       	std	Y+29, r24	; 0x1d
    1902:	7f 8f       	std	Y+31, r23	; 0x1f
    1904:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOW*/
	DIO_ErrStateSetPinValue(Lcd->RS_Group , Lcd->RS_Pin , DIO_Low);
    1906:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1908:	ff 8d       	ldd	r31, Y+31	; 0x1f
    190a:	80 81       	ld	r24, Z
    190c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    190e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	69 2f       	mov	r22, r25
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(Lcd->RW_Group , Lcd-> RW_Pin , DIO_Low) ;
    191a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    191c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    191e:	81 81       	ldd	r24, Z+1	; 0x01
    1920:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1922:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1924:	94 81       	ldd	r25, Z+4	; 0x04
    1926:	69 2f       	mov	r22, r25
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	/*Group = COmmand */
	DIO_ErrStateSetGroupValue(Lcd->Data_Group , Copy_Command) ;
    192e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1930:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1932:	86 81       	ldd	r24, Z+6	; 0x06
    1934:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1936:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(Lcd->E_Group , Lcd-> E_Pin , DIO_High) ;
    193a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    193c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1942:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1944:	95 81       	ldd	r25, Z+5	; 0x05
    1946:	69 2f       	mov	r22, r25
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	bf e3       	ldi	r27, 0x3F	; 63
    1956:	89 8f       	std	Y+25, r24	; 0x19
    1958:	9a 8f       	std	Y+26, r25	; 0x1a
    195a:	ab 8f       	std	Y+27, r26	; 0x1b
    195c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195e:	69 8d       	ldd	r22, Y+25	; 0x19
    1960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a ef       	ldi	r20, 0xFA	; 250
    196c:	54 e4       	ldi	r21, 0x44	; 68
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8d 8b       	std	Y+21, r24	; 0x15
    1978:	9e 8b       	std	Y+22, r25	; 0x16
    197a:	af 8b       	std	Y+23, r26	; 0x17
    197c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197e:	6d 89       	ldd	r22, Y+21	; 0x15
    1980:	7e 89       	ldd	r23, Y+22	; 0x16
    1982:	8f 89       	ldd	r24, Y+23	; 0x17
    1984:	98 8d       	ldd	r25, Y+24	; 0x18
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <Lcd_VoidSendCommand+0xb4>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	3f c0       	rjmp	.+126    	; 0x1a1e <Lcd_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    19a0:	6d 89       	ldd	r22, Y+21	; 0x15
    19a2:	7e 89       	ldd	r23, Y+22	; 0x16
    19a4:	8f 89       	ldd	r24, Y+23	; 0x17
    19a6:	98 8d       	ldd	r25, Y+24	; 0x18
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	4c f5       	brge	.+82     	; 0x1a0a <Lcd_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <Lcd_VoidSendCommand+0x114>
    19e2:	88 ec       	ldi	r24, 0xC8	; 200
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9a 8b       	std	Y+18, r25	; 0x12
    19e8:	89 8b       	std	Y+17, r24	; 0x11
    19ea:	89 89       	ldd	r24, Y+17	; 0x11
    19ec:	9a 89       	ldd	r25, Y+18	; 0x12
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <Lcd_VoidSendCommand+0x102>
    19f2:	9a 8b       	std	Y+18, r25	; 0x12
    19f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	8b 89       	ldd	r24, Y+19	; 0x13
    19f8:	9c 89       	ldd	r25, Y+20	; 0x14
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	69 f7       	brne	.-38     	; 0x19e2 <Lcd_VoidSendCommand+0xf6>
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <Lcd_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	98 8b       	std	Y+16, r25	; 0x10
    1a24:	8f 87       	std	Y+15, r24	; 0x0f
    1a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a28:	98 89       	ldd	r25, Y+16	; 0x10
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <Lcd_VoidSendCommand+0x13e>
    1a2e:	98 8b       	std	Y+16, r25	; 0x10
    1a30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(Lcd->E_Group , Lcd-> E_Pin , DIO_Low) ;
    1a32:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1a34:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1a3a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1a3c:	95 81       	ldd	r25, Z+5	; 0x05
    1a3e:	69 2f       	mov	r22, r25
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a0 e8       	ldi	r26, 0x80	; 128
    1a4c:	bf e3       	ldi	r27, 0x3F	; 63
    1a4e:	8b 87       	std	Y+11, r24	; 0x0b
    1a50:	9c 87       	std	Y+12, r25	; 0x0c
    1a52:	ad 87       	std	Y+13, r26	; 0x0d
    1a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	a9 87       	std	Y+9, r26	; 0x09
    1a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <Lcd_VoidSendCommand+0x1ac>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <Lcd_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <Lcd_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <Lcd_VoidSendCommand+0x20c>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <Lcd_VoidSendCommand+0x1fa>
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <Lcd_VoidSendCommand+0x1ee>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <Lcd_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <Lcd_VoidSendCommand+0x236>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b2a:	6f 96       	adiw	r28, 0x1f	; 31
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <Lcd_VoidSendChar>:
void Lcd_VoidSendChar(u8 Copy_Char, Lcd_Info * Lcd)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	6f 97       	sbiw	r28, 0x1f	; 31
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	8d 8f       	std	Y+29, r24	; 0x1d
    1b52:	7f 8f       	std	Y+31, r23	; 0x1f
    1b54:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->High*/
	DIO_ErrStateSetPinValue(Lcd->RS_Group , Lcd->RS_Pin , DIO_High);
    1b56:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b58:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b5a:	80 81       	ld	r24, Z
    1b5c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b5e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	69 2f       	mov	r22, r25
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(Lcd->RW_Group , Lcd-> RW_Pin , DIO_Low) ;
    1b6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b6e:	81 81       	ldd	r24, Z+1	; 0x01
    1b70:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b72:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b74:	94 81       	ldd	r25, Z+4	; 0x04
    1b76:	69 2f       	mov	r22, r25
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
	/*Group = COmmand */
	DIO_ErrStateSetGroupValue(Lcd->Data_Group , Copy_Char) ;
    1b7e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b80:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b82:	86 81       	ldd	r24, Z+6	; 0x06
    1b84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b86:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(Lcd->E_Group , Lcd-> E_Pin , DIO_High) ;
    1b8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1b92:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1b94:	95 81       	ldd	r25, Z+5	; 0x05
    1b96:	69 2f       	mov	r22, r25
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e8       	ldi	r26, 0x80	; 128
    1ba4:	bf e3       	ldi	r27, 0x3F	; 63
    1ba6:	89 8f       	std	Y+25, r24	; 0x19
    1ba8:	9a 8f       	std	Y+26, r25	; 0x1a
    1baa:	ab 8f       	std	Y+27, r26	; 0x1b
    1bac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8d 8b       	std	Y+21, r24	; 0x15
    1bc8:	9e 8b       	std	Y+22, r25	; 0x16
    1bca:	af 8b       	std	Y+23, r26	; 0x17
    1bcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bce:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <Lcd_VoidSendChar+0xb4>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <Lcd_VoidSendChar+0x132>
	else if (__tmp > 65535)
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <Lcd_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <Lcd_VoidSendChar+0x114>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9a 8b       	std	Y+18, r25	; 0x12
    1c38:	89 8b       	std	Y+17, r24	; 0x11
    1c3a:	89 89       	ldd	r24, Y+17	; 0x11
    1c3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <Lcd_VoidSendChar+0x102>
    1c42:	9a 8b       	std	Y+18, r25	; 0x12
    1c44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9c 8b       	std	Y+20, r25	; 0x14
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	9c 89       	ldd	r25, Y+20	; 0x14
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <Lcd_VoidSendChar+0xf6>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <Lcd_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	98 8b       	std	Y+16, r25	; 0x10
    1c74:	8f 87       	std	Y+15, r24	; 0x0f
    1c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c78:	98 89       	ldd	r25, Y+16	; 0x10
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <Lcd_VoidSendChar+0x13e>
    1c7e:	98 8b       	std	Y+16, r25	; 0x10
    1c80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(Lcd->E_Group , Lcd-> E_Pin , DIO_Low) ;
    1c82:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c84:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c8a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c8c:	95 81       	ldd	r25, Z+5	; 0x05
    1c8e:	69 2f       	mov	r22, r25
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e8       	ldi	r26, 0x80	; 128
    1c9c:	bf e3       	ldi	r27, 0x3F	; 63
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <Lcd_VoidSendChar+0x1ac>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <Lcd_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <Lcd_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <Lcd_VoidSendChar+0x20c>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <Lcd_VoidSendChar+0x1fa>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <Lcd_VoidSendChar+0x1ee>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <Lcd_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <Lcd_VoidSendChar+0x236>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d7a:	6f 96       	adiw	r28, 0x1f	; 31
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <Lcd_VoidInit>:

void Lcd_VoidInit(Lcd_Info * Lcd)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	ea 97       	sbiw	r28, 0x3a	; 58
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	9a af       	std	Y+58, r25	; 0x3a
    1da2:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(Lcd->RS_Group,Lcd->RS_Pin,DIO_Output);
    1da4:	e9 ad       	ldd	r30, Y+57	; 0x39
    1da6:	fa ad       	ldd	r31, Y+58	; 0x3a
    1da8:	80 81       	ld	r24, Z
    1daa:	e9 ad       	ldd	r30, Y+57	; 0x39
    1dac:	fa ad       	ldd	r31, Y+58	; 0x3a
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	69 2f       	mov	r22, r25
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(Lcd->RW_Group,Lcd->RW_Pin,DIO_Output);
    1db8:	e9 ad       	ldd	r30, Y+57	; 0x39
    1dba:	fa ad       	ldd	r31, Y+58	; 0x3a
    1dbc:	81 81       	ldd	r24, Z+1	; 0x01
    1dbe:	e9 ad       	ldd	r30, Y+57	; 0x39
    1dc0:	fa ad       	ldd	r31, Y+58	; 0x3a
    1dc2:	94 81       	ldd	r25, Z+4	; 0x04
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(Lcd->E_Group,Lcd->E_Pin,DIO_Output);
    1dcc:	e9 ad       	ldd	r30, Y+57	; 0x39
    1dce:	fa ad       	ldd	r31, Y+58	; 0x3a
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	e9 ad       	ldd	r30, Y+57	; 0x39
    1dd4:	fa ad       	ldd	r31, Y+58	; 0x3a
    1dd6:	95 81       	ldd	r25, Z+5	; 0x05
    1dd8:	69 2f       	mov	r22, r25
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(Lcd->Data_Group,0xFF);
    1de0:	e9 ad       	ldd	r30, Y+57	; 0x39
    1de2:	fa ad       	ldd	r31, Y+58	; 0x3a
    1de4:	86 81       	ldd	r24, Z+6	; 0x06
    1de6:	6f ef       	ldi	r22, 0xFF	; 255
    1de8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_ErrStateSetGroupDirection>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e2       	ldi	r26, 0x20	; 32
    1df2:	b2 e4       	ldi	r27, 0x42	; 66
    1df4:	8d ab       	std	Y+53, r24	; 0x35
    1df6:	9e ab       	std	Y+54, r25	; 0x36
    1df8:	af ab       	std	Y+55, r26	; 0x37
    1dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1e00:	8f a9       	ldd	r24, Y+55	; 0x37
    1e02:	98 ad       	ldd	r25, Y+56	; 0x38
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a ef       	ldi	r20, 0xFA	; 250
    1e0a:	54 e4       	ldi	r21, 0x44	; 68
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	89 ab       	std	Y+49, r24	; 0x31
    1e16:	9a ab       	std	Y+50, r25	; 0x32
    1e18:	ab ab       	std	Y+51, r26	; 0x33
    1e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <Lcd_VoidInit+0xb2>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <Lcd_VoidInit+0x130>
	else if (__tmp > 65535)
    1e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e40:	7a a9       	ldd	r23, Y+50	; 0x32
    1e42:	8b a9       	ldd	r24, Y+51	; 0x33
    1e44:	9c a9       	ldd	r25, Y+52	; 0x34
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <Lcd_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6d a9       	ldd	r22, Y+53	; 0x35
    1e58:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <Lcd_VoidInit+0x112>
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e a7       	std	Y+46, r25	; 0x2e
    1e86:	8d a7       	std	Y+45, r24	; 0x2d
    1e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <Lcd_VoidInit+0x100>
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <Lcd_VoidInit+0xf4>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <Lcd_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	9c a7       	std	Y+44, r25	; 0x2c
    1ec2:	8b a7       	std	Y+43, r24	; 0x2b
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <Lcd_VoidInit+0x13c>
    1ecc:	9c a7       	std	Y+44, r25	; 0x2c
    1ece:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait More than 30 ms */
	_delay_ms(40);
	/*Sent Function Set*/
	Lcd_VoidSendCommand(LCD_Set8Bit2Line5x8,Lcd) ;
    1ed0:	29 ad       	ldd	r18, Y+57	; 0x39
    1ed2:	3a ad       	ldd	r19, Y+58	; 0x3a
    1ed4:	88 e3       	ldi	r24, 0x38	; 56
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Lcd_VoidSendCommand>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e8       	ldi	r26, 0x80	; 128
    1ee2:	bf e3       	ldi	r27, 0x3F	; 63
    1ee4:	8f a3       	std	Y+39, r24	; 0x27
    1ee6:	98 a7       	std	Y+40, r25	; 0x28
    1ee8:	a9 a7       	std	Y+41, r26	; 0x29
    1eea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	6f a1       	ldd	r22, Y+39	; 0x27
    1eee:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a ef       	ldi	r20, 0xFA	; 250
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	8b a3       	std	Y+35, r24	; 0x23
    1f06:	9c a3       	std	Y+36, r25	; 0x24
    1f08:	ad a3       	std	Y+37, r26	; 0x25
    1f0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f10:	8d a1       	ldd	r24, Y+37	; 0x25
    1f12:	9e a1       	ldd	r25, Y+38	; 0x26
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <Lcd_VoidInit+0x1a2>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	3f c0       	rjmp	.+126    	; 0x1fac <Lcd_VoidInit+0x220>
	else if (__tmp > 65535)
    1f2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f30:	7c a1       	ldd	r23, Y+36	; 0x24
    1f32:	8d a1       	ldd	r24, Y+37	; 0x25
    1f34:	9e a1       	ldd	r25, Y+38	; 0x26
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	57 e4       	ldi	r21, 0x47	; 71
    1f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	4c f5       	brge	.+82     	; 0x1f98 <Lcd_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f46:	6f a1       	ldd	r22, Y+39	; 0x27
    1f48:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9a a3       	std	Y+34, r25	; 0x22
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <Lcd_VoidInit+0x202>
    1f70:	88 ec       	ldi	r24, 0xC8	; 200
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	98 a3       	std	Y+32, r25	; 0x20
    1f76:	8f 8f       	std	Y+31, r24	; 0x1f
    1f78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <Lcd_VoidInit+0x1f0>
    1f80:	98 a3       	std	Y+32, r25	; 0x20
    1f82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	89 a1       	ldd	r24, Y+33	; 0x21
    1f86:	9a a1       	ldd	r25, Y+34	; 0x22
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <Lcd_VoidInit+0x1e4>
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <Lcd_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9a a3       	std	Y+34, r25	; 0x22
    1faa:	89 a3       	std	Y+33, r24	; 0x21
    1fac:	89 a1       	ldd	r24, Y+33	; 0x21
    1fae:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <Lcd_VoidInit+0x22c>
    1fbc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbe:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait more than 39us*/
	_delay_ms(1);
	/*Sent Displayon/off*/
	Lcd_VoidSendCommand(LCD_CursorON,Lcd) ;
    1fc0:	29 ad       	ldd	r18, Y+57	; 0x39
    1fc2:	3a ad       	ldd	r19, Y+58	; 0x3a
    1fc4:	8e e0       	ldi	r24, 0x0E	; 14
    1fc6:	b9 01       	movw	r22, r18
    1fc8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Lcd_VoidSendCommand>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d 8b       	std	Y+21, r24	; 0x15
    1ff6:	9e 8b       	std	Y+22, r25	; 0x16
    1ff8:	af 8b       	std	Y+23, r26	; 0x17
    1ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <Lcd_VoidInit+0x292>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	3f c0       	rjmp	.+126    	; 0x209c <Lcd_VoidInit+0x310>
	else if (__tmp > 65535)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <Lcd_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	0f c0       	rjmp	.+30     	; 0x207e <Lcd_VoidInit+0x2f2>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	89 89       	ldd	r24, Y+17	; 0x11
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <Lcd_VoidInit+0x2e0>
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <Lcd_VoidInit+0x2d4>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <Lcd_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <Lcd_VoidInit+0x31c>
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
	/*wait more than 39us*/
	_delay_ms(1);
	/*Sent Clear*/
	Lcd_VoidSendCommand(LCD_ClearDisplay,Lcd) ;
    20b0:	29 ad       	ldd	r18, Y+57	; 0x39
    20b2:	3a ad       	ldd	r19, Y+58	; 0x3a
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	b9 01       	movw	r22, r18
    20b8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Lcd_VoidSendCommand>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	b0 e4       	ldi	r27, 0x40	; 64
    20c4:	8b 87       	std	Y+11, r24	; 0x0b
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
    20c8:	ad 87       	std	Y+13, r26	; 0x0d
    20ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a ef       	ldi	r20, 0xFA	; 250
    20da:	54 e4       	ldi	r21, 0x44	; 68
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8f 83       	std	Y+7, r24	; 0x07
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	a9 87       	std	Y+9, r26	; 0x09
    20ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <Lcd_VoidInit+0x382>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	3f c0       	rjmp	.+126    	; 0x218c <Lcd_VoidInit+0x400>
	else if (__tmp > 65535)
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <Lcd_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	8d 85       	ldd	r24, Y+13	; 0x0d
    212c:	9e 85       	ldd	r25, Y+14	; 0x0e
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	0f c0       	rjmp	.+30     	; 0x216e <Lcd_VoidInit+0x3e2>
    2150:	88 ec       	ldi	r24, 0xC8	; 200
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <Lcd_VoidInit+0x3d0>
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <Lcd_VoidInit+0x3c4>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <Lcd_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <Lcd_VoidInit+0x40c>
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
	/*wait more than 39us*/
	_delay_ms(2);

}
    21a0:	ea 96       	adiw	r28, 0x3a	; 58
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <Lcd_VoidSendString>:

void Lcd_VoidSendString(u8 *Address_String ,Lcd_Info * Lcd)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <Lcd_VoidSendString+0x6>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <Lcd_VoidSendString+0x8>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9b 83       	std	Y+3, r25	; 0x03
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    21c4:	7d 83       	std	Y+5, r23	; 0x05
    21c6:	6c 83       	std	Y+4, r22	; 0x04
	/*Counter For Loop */
	u8 Local_Counter = 0 ;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	11 c0       	rjmp	.+34     	; 0x21ee <Lcd_VoidSendString+0x3c>
	/*Loop*/
	while (Address_String[Local_Counter]!='\0')
	{
		/*Send Char */
		Lcd_VoidSendChar(Address_String[Local_Counter],Lcd) ;
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	2c 81       	ldd	r18, Y+4	; 0x04
    21e0:	3d 81       	ldd	r19, Y+5	; 0x05
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_VoidSendChar>
		/*Increment Counter */
		Local_Counter++;
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	89 83       	std	Y+1, r24	; 0x01
void Lcd_VoidSendString(u8 *Address_String ,Lcd_Info * Lcd)
{
	/*Counter For Loop */
	u8 Local_Counter = 0 ;
	/*Loop*/
	while (Address_String[Local_Counter]!='\0')
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	fc 01       	movw	r30, r24
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	80 81       	ld	r24, Z
    2200:	88 23       	and	r24, r24
    2202:	21 f7       	brne	.-56     	; 0x21cc <Lcd_VoidSendString+0x1a>
		/*Send Char */
		Lcd_VoidSendChar(Address_String[Local_Counter],Lcd) ;
		/*Increment Counter */
		Local_Counter++;
	}
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <Lcd_VoidGoXY>:

void Lcd_VoidGoXY(Lcd_Info * Lcd ,u8 Copy_XLocation ,u8 Copy_YLocation )
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <Lcd_VoidGoXY+0x6>
    221a:	00 d0       	rcall	.+0      	; 0x221c <Lcd_VoidGoXY+0x8>
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	9b 83       	std	Y+3, r25	; 0x03
    2224:	8a 83       	std	Y+2, r24	; 0x02
    2226:	6c 83       	std	Y+4, r22	; 0x04
    2228:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_Address = 0 ;
    222a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_XLocation == 0)
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	88 23       	and	r24, r24
    2230:	19 f4       	brne	.+6      	; 0x2238 <Lcd_VoidGoXY+0x24>
	{
		Local_Address = Copy_YLocation ;
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	06 c0       	rjmp	.+12     	; 0x2244 <Lcd_VoidGoXY+0x30>
	}
	else if (Copy_XLocation == 1)
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	19 f4       	brne	.+6      	; 0x2244 <Lcd_VoidGoXY+0x30>
	{
		Local_Address = Copy_YLocation + LCD_SecondLine ;
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	80 5c       	subi	r24, 0xC0	; 192
    2242:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	Lcd_VoidSendCommand((LCD_SetAddressDDRAM + Local_Address),Lcd);
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	80 58       	subi	r24, 0x80	; 128
    2248:	2a 81       	ldd	r18, Y+2	; 0x02
    224a:	3b 81       	ldd	r19, Y+3	; 0x03
    224c:	b9 01       	movw	r22, r18
    224e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Lcd_VoidSendCommand>
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_voidSendNumber>:
void LCD_voidSendNumber(Lcd_Info * Lcd, s32 Copy_u32Num)
{
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	63 97       	sbiw	r28, 0x13	; 19
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	9f 87       	std	Y+15, r25	; 0x0f
    2280:	8e 87       	std	Y+14, r24	; 0x0e
    2282:	48 8b       	std	Y+16, r20	; 0x10
    2284:	59 8b       	std	Y+17, r21	; 0x11
    2286:	6a 8b       	std	Y+18, r22	; 0x12
    2288:	7b 8b       	std	Y+19, r23	; 0x13
	u32 Revers_num=0;
    228a:	1a 86       	std	Y+10, r1	; 0x0a
    228c:	1b 86       	std	Y+11, r1	; 0x0b
    228e:	1c 86       	std	Y+12, r1	; 0x0c
    2290:	1d 86       	std	Y+13, r1	; 0x0d
	u8 displayed_num =0;
    2292:	19 86       	std	Y+9, r1	; 0x09
	u32 multiplier =1 ,i=0;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e0       	ldi	r26, 0x00	; 0
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	af 83       	std	Y+7, r26	; 0x07
    22a2:	b8 87       	std	Y+8, r27	; 0x08
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	1a 82       	std	Y+2, r1	; 0x02
    22a8:	1b 82       	std	Y+3, r1	; 0x03
    22aa:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_u32Num==0)
    22ac:	88 89       	ldd	r24, Y+16	; 0x10
    22ae:	99 89       	ldd	r25, Y+17	; 0x11
    22b0:	aa 89       	ldd	r26, Y+18	; 0x12
    22b2:	bb 89       	ldd	r27, Y+19	; 0x13
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	a1 05       	cpc	r26, r1
    22b8:	b1 05       	cpc	r27, r1
    22ba:	39 f4       	brne	.+14     	; 0x22ca <LCD_voidSendNumber+0x68>
	{
		Lcd_VoidSendChar('0',Lcd);
    22bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    22be:	3f 85       	ldd	r19, Y+15	; 0x0f
    22c0:	80 e3       	ldi	r24, 0x30	; 48
    22c2:	b9 01       	movw	r22, r18
    22c4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_VoidSendChar>
    22c8:	6d c0       	rjmp	.+218    	; 0x23a4 <LCD_voidSendNumber+0x142>
	}
	else if (Copy_u32Num<0)
    22ca:	88 89       	ldd	r24, Y+16	; 0x10
    22cc:	99 89       	ldd	r25, Y+17	; 0x11
    22ce:	aa 89       	ldd	r26, Y+18	; 0x12
    22d0:	bb 89       	ldd	r27, Y+19	; 0x13
    22d2:	bb 23       	and	r27, r27
    22d4:	0c f0       	brlt	.+2      	; 0x22d8 <LCD_voidSendNumber+0x76>
    22d6:	66 c0       	rjmp	.+204    	; 0x23a4 <LCD_voidSendNumber+0x142>
	{
		Lcd_VoidSendChar('-',Lcd);
    22d8:	2e 85       	ldd	r18, Y+14	; 0x0e
    22da:	3f 85       	ldd	r19, Y+15	; 0x0f
    22dc:	8d e2       	ldi	r24, 0x2D	; 45
    22de:	b9 01       	movw	r22, r18
    22e0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_VoidSendChar>
		Copy_u32Num *= -1;
    22e4:	88 89       	ldd	r24, Y+16	; 0x10
    22e6:	99 89       	ldd	r25, Y+17	; 0x11
    22e8:	aa 89       	ldd	r26, Y+18	; 0x12
    22ea:	bb 89       	ldd	r27, Y+19	; 0x13
    22ec:	b0 95       	com	r27
    22ee:	a0 95       	com	r26
    22f0:	90 95       	com	r25
    22f2:	81 95       	neg	r24
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	af 4f       	sbci	r26, 0xFF	; 255
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	88 8b       	std	Y+16, r24	; 0x10
    22fc:	99 8b       	std	Y+17, r25	; 0x11
    22fe:	aa 8b       	std	Y+18, r26	; 0x12
    2300:	bb 8b       	std	Y+19, r27	; 0x13
    2302:	50 c0       	rjmp	.+160    	; 0x23a4 <LCD_voidSendNumber+0x142>
	}
	while (Copy_u32Num !=0)
	{
		Revers_num =(Revers_num *10)+ Copy_u32Num %10;
    2304:	8a 85       	ldd	r24, Y+10	; 0x0a
    2306:	9b 85       	ldd	r25, Y+11	; 0x0b
    2308:	ac 85       	ldd	r26, Y+12	; 0x0c
    230a:	bd 85       	ldd	r27, Y+13	; 0x0d
    230c:	2a e0       	ldi	r18, 0x0A	; 10
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__mulsi3>
    231c:	7b 01       	movw	r14, r22
    231e:	8c 01       	movw	r16, r24
    2320:	88 89       	ldd	r24, Y+16	; 0x10
    2322:	99 89       	ldd	r25, Y+17	; 0x11
    2324:	aa 89       	ldd	r26, Y+18	; 0x12
    2326:	bb 89       	ldd	r27, Y+19	; 0x13
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 a1 14 	call	0x2942	; 0x2942 <__divmodsi4>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8e 0d       	add	r24, r14
    233e:	9f 1d       	adc	r25, r15
    2340:	a0 1f       	adc	r26, r16
    2342:	b1 1f       	adc	r27, r17
    2344:	8a 87       	std	Y+10, r24	; 0x0a
    2346:	9b 87       	std	Y+11, r25	; 0x0b
    2348:	ac 87       	std	Y+12, r26	; 0x0c
    234a:	bd 87       	std	Y+13, r27	; 0x0d
		if(Revers_num==0)
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	ac 85       	ldd	r26, Y+12	; 0x0c
    2352:	bd 85       	ldd	r27, Y+13	; 0x0d
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	a1 05       	cpc	r26, r1
    2358:	b1 05       	cpc	r27, r1
    235a:	91 f4       	brne	.+36     	; 0x2380 <LCD_voidSendNumber+0x11e>
			multiplier *=10;
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	af 81       	ldd	r26, Y+7	; 0x07
    2362:	b8 85       	ldd	r27, Y+8	; 0x08
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__mulsi3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	af 83       	std	Y+7, r26	; 0x07
    237e:	b8 87       	std	Y+8, r27	; 0x08
			Copy_u32Num /=10;
    2380:	88 89       	ldd	r24, Y+16	; 0x10
    2382:	99 89       	ldd	r25, Y+17	; 0x11
    2384:	aa 89       	ldd	r26, Y+18	; 0x12
    2386:	bb 89       	ldd	r27, Y+19	; 0x13
    2388:	2a e0       	ldi	r18, 0x0A	; 10
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 a1 14 	call	0x2942	; 0x2942 <__divmodsi4>
    2398:	da 01       	movw	r26, r20
    239a:	c9 01       	movw	r24, r18
    239c:	88 8b       	std	Y+16, r24	; 0x10
    239e:	99 8b       	std	Y+17, r25	; 0x11
    23a0:	aa 8b       	std	Y+18, r26	; 0x12
    23a2:	bb 8b       	std	Y+19, r27	; 0x13
	else if (Copy_u32Num<0)
	{
		Lcd_VoidSendChar('-',Lcd);
		Copy_u32Num *= -1;
	}
	while (Copy_u32Num !=0)
    23a4:	88 89       	ldd	r24, Y+16	; 0x10
    23a6:	99 89       	ldd	r25, Y+17	; 0x11
    23a8:	aa 89       	ldd	r26, Y+18	; 0x12
    23aa:	bb 89       	ldd	r27, Y+19	; 0x13
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	a1 05       	cpc	r26, r1
    23b0:	b1 05       	cpc	r27, r1
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <LCD_voidSendNumber+0x154>
    23b4:	a7 cf       	rjmp	.-178    	; 0x2304 <LCD_voidSendNumber+0xa2>
    23b6:	49 c0       	rjmp	.+146    	; 0x244a <LCD_voidSendNumber+0x1e8>
			multiplier *=10;
			Copy_u32Num /=10;
	}
	while (Revers_num !=i)
	{
		displayed_num =Revers_num % 10;
    23b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    23bc:	ac 85       	ldd	r26, Y+12	; 0x0c
    23be:	bd 85       	ldd	r27, Y+13	; 0x0d
    23c0:	2a e0       	ldi	r18, 0x0A	; 10
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodsi4>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	89 87       	std	Y+9, r24	; 0x09
		Lcd_VoidSendChar(displayed_num+48,Lcd);//48->'0'
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	80 5d       	subi	r24, 0xD0	; 208
    23da:	2e 85       	ldd	r18, Y+14	; 0x0e
    23dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    23de:	b9 01       	movw	r22, r18
    23e0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Lcd_VoidSendChar>
		Revers_num/=10;
    23e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e8:	ac 85       	ldd	r26, Y+12	; 0x0c
    23ea:	bd 85       	ldd	r27, Y+13	; 0x0d
    23ec:	2a e0       	ldi	r18, 0x0A	; 10
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodsi4>
    23fc:	da 01       	movw	r26, r20
    23fe:	c9 01       	movw	r24, r18
    2400:	8a 87       	std	Y+10, r24	; 0x0a
    2402:	9b 87       	std	Y+11, r25	; 0x0b
    2404:	ac 87       	std	Y+12, r26	; 0x0c
    2406:	bd 87       	std	Y+13, r27	; 0x0d
		if (Revers_num==0 && multiplier>=10)
    2408:	8a 85       	ldd	r24, Y+10	; 0x0a
    240a:	9b 85       	ldd	r25, Y+11	; 0x0b
    240c:	ac 85       	ldd	r26, Y+12	; 0x0c
    240e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	a1 05       	cpc	r26, r1
    2414:	b1 05       	cpc	r27, r1
    2416:	c9 f4       	brne	.+50     	; 0x244a <LCD_voidSendNumber+0x1e8>
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	af 81       	ldd	r26, Y+7	; 0x07
    241e:	b8 85       	ldd	r27, Y+8	; 0x08
    2420:	8a 30       	cpi	r24, 0x0A	; 10
    2422:	91 05       	cpc	r25, r1
    2424:	a1 05       	cpc	r26, r1
    2426:	b1 05       	cpc	r27, r1
    2428:	80 f0       	brcs	.+32     	; 0x244a <LCD_voidSendNumber+0x1e8>
		{
			i=1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	ab 83       	std	Y+3, r26	; 0x03
    2438:	bc 83       	std	Y+4, r27	; 0x04
			Revers_num = multiplier;
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	af 81       	ldd	r26, Y+7	; 0x07
    2440:	b8 85       	ldd	r27, Y+8	; 0x08
    2442:	8a 87       	std	Y+10, r24	; 0x0a
    2444:	9b 87       	std	Y+11, r25	; 0x0b
    2446:	ac 87       	std	Y+12, r26	; 0x0c
    2448:	bd 87       	std	Y+13, r27	; 0x0d
		Revers_num =(Revers_num *10)+ Copy_u32Num %10;
		if(Revers_num==0)
			multiplier *=10;
			Copy_u32Num /=10;
	}
	while (Revers_num !=i)
    244a:	2a 85       	ldd	r18, Y+10	; 0x0a
    244c:	3b 85       	ldd	r19, Y+11	; 0x0b
    244e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2450:	5d 85       	ldd	r21, Y+13	; 0x0d
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	ab 81       	ldd	r26, Y+3	; 0x03
    2458:	bc 81       	ldd	r27, Y+4	; 0x04
    245a:	28 17       	cp	r18, r24
    245c:	39 07       	cpc	r19, r25
    245e:	4a 07       	cpc	r20, r26
    2460:	5b 07       	cpc	r21, r27
    2462:	09 f0       	breq	.+2      	; 0x2466 <LCD_voidSendNumber+0x204>
    2464:	a9 cf       	rjmp	.-174    	; 0x23b8 <LCD_voidSendNumber+0x156>
			i=1;
			Revers_num = multiplier;
		}
	}

}
    2466:	63 96       	adiw	r28, 0x13	; 19
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	08 95       	ret

00002480 <KEYPAD_init>:
#include "KEYPAD_interface.h"
#include "KEYPAD_config.h"
#include "KEYPAD_private.h"

void KEYPAD_init(void)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	/*Set keypad columns pins as OUTPUT*/
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_COLUMN0_PIN, DIO_Output);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_COLUMN1_PIN, DIO_Output);
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_COLUMN2_PIN, DIO_Output);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_COLUMN3_PIN, DIO_Output);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	63 e0       	ldi	r22, 0x03	; 3
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>

	/*Set keypad rows pins as INPUT*/
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_ROW0_PIN, DIO_Input);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	64 e0       	ldi	r22, 0x04	; 4
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_ROW1_PIN, DIO_Input);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	65 e0       	ldi	r22, 0x05	; 5
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_ROW2_PIN, DIO_Input);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	66 e0       	ldi	r22, 0x06	; 6
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(KEYPAD_PORT, KEYPAD_ROW3_PIN, DIO_Input);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	67 e0       	ldi	r22, 0x07	; 7
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_ErrStateSetPinDirection>


	/*Set the keypad port value to HIGH(to enable pull-up in rows pins, and out high signal on columns pins)*/
	DIO_ErrStateSetGroupValue(KEYPAD_PORT, 0xff);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	6f ef       	ldi	r22, 0xFF	; 255
    24dc:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_ErrStateSetGroupValue>
}
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <KEYPAD_read>:

u8 KEYPAD_read(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	a2 97       	sbiw	r28, 0x22	; 34
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = KEYPAD_DEFAULT_KEY;
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ColCounter, Local_u8RowCounter, Local_u8KeyFlag;

	u8 KeypadArray[KEYPAD_ROWS_NUM][KEYPAD_COLS_NUM] = KEYPAD_ARR_VAL;
    24fe:	ce 01       	movw	r24, r28
    2500:	05 96       	adiw	r24, 0x05	; 5
    2502:	9f 8f       	std	Y+31, r25	; 0x1f
    2504:	8e 8f       	std	Y+30, r24	; 0x1e
    2506:	e1 e8       	ldi	r30, 0x81	; 129
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	f9 a3       	std	Y+33, r31	; 0x21
    250c:	e8 a3       	std	Y+32, r30	; 0x20
    250e:	f0 e1       	ldi	r31, 0x10	; 16
    2510:	fa a3       	std	Y+34, r31	; 0x22
    2512:	e8 a1       	ldd	r30, Y+32	; 0x20
    2514:	f9 a1       	ldd	r31, Y+33	; 0x21
    2516:	00 80       	ld	r0, Z
    2518:	88 a1       	ldd	r24, Y+32	; 0x20
    251a:	99 a1       	ldd	r25, Y+33	; 0x21
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	99 a3       	std	Y+33, r25	; 0x21
    2520:	88 a3       	std	Y+32, r24	; 0x20
    2522:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2524:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2526:	00 82       	st	Z, r0
    2528:	8e 8d       	ldd	r24, Y+30	; 0x1e
    252a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	9f 8f       	std	Y+31, r25	; 0x1f
    2530:	8e 8f       	std	Y+30, r24	; 0x1e
    2532:	9a a1       	ldd	r25, Y+34	; 0x22
    2534:	91 50       	subi	r25, 0x01	; 1
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	ea a1       	ldd	r30, Y+34	; 0x22
    253a:	ee 23       	and	r30, r30
    253c:	51 f7       	brne	.-44     	; 0x2512 <KEYPAD_read+0x2c>
	u8 ColumnsArr[KEYPAD_COLS_NUM] = {KEYPAD_COLUMN0_PIN, KEYPAD_COLUMN1_PIN, KEYPAD_COLUMN2_PIN, KEYPAD_COLUMN3_PIN};
    253e:	1d 8a       	std	Y+21, r1	; 0x15
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	8e 8b       	std	Y+22, r24	; 0x16
    2544:	82 e0       	ldi	r24, 0x02	; 2
    2546:	8f 8b       	std	Y+23, r24	; 0x17
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	88 8f       	std	Y+24, r24	; 0x18
	u8 RowsArr[KEYPAD_ROWS_NUM]    = {KEYPAD_ROW0_PIN, KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN};
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	89 8f       	std	Y+25, r24	; 0x19
    2550:	85 e0       	ldi	r24, 0x05	; 5
    2552:	8a 8f       	std	Y+26, r24	; 0x1a
    2554:	86 e0       	ldi	r24, 0x06	; 6
    2556:	8b 8f       	std	Y+27, r24	; 0x1b
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	8c 8f       	std	Y+28, r24	; 0x1c

	for(Local_u8ColCounter = 0; Local_u8ColCounter < KEYPAD_COLS_NUM; Local_u8ColCounter++)
    255c:	1b 82       	std	Y+3, r1	; 0x03
    255e:	74 c0       	rjmp	.+232    	; 0x2648 <KEYPAD_read+0x162>
	{
		/*Activate the current column by setting its value to low*/
		DIO_ErrStateSetPinValue(KEYPAD_PORT, ColumnsArr[Local_u8ColCounter], DIO_Low);
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	ce 01       	movw	r24, r28
    2568:	45 96       	adiw	r24, 0x15	; 21
    256a:	fc 01       	movw	r30, r24
    256c:	e2 0f       	add	r30, r18
    256e:	f3 1f       	adc	r31, r19
    2570:	90 81       	ld	r25, Z
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	69 2f       	mov	r22, r25
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>

		/*Loop for the rows to get if any key is pressed*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_ROWS_NUM; Local_u8RowCounter++)
    257c:	1a 82       	std	Y+2, r1	; 0x02
    257e:	4f c0       	rjmp	.+158    	; 0x261e <KEYPAD_read+0x138>
		{
			Local_u8KeyFlag = DIO_ErrStateReadPinValuekey(KEYPAD_PORT, RowsArr[Local_u8RowCounter]);
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	ce 01       	movw	r24, r28
    2588:	49 96       	adiw	r24, 0x19	; 25
    258a:	fc 01       	movw	r30, r24
    258c:	e2 0f       	add	r30, r18
    258e:	f3 1f       	adc	r31, r19
    2590:	90 81       	ld	r25, Z
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	69 2f       	mov	r22, r25
    2596:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateReadPinValuekey>
    259a:	89 83       	std	Y+1, r24	; 0x01
			if(DIO_Low == Local_u8KeyFlag)
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 23       	and	r24, r24
    25a0:	d9 f5       	brne	.+118    	; 0x2618 <KEYPAD_read+0x132>
			{
				Local_u8PressedKey = KeypadArray[Local_u8RowCounter][Local_u8ColCounter];
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	48 2f       	mov	r20, r24
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	82 0f       	add	r24, r18
    25bc:	93 1f       	adc	r25, r19
    25be:	84 0f       	add	r24, r20
    25c0:	95 1f       	adc	r25, r21
    25c2:	fc 01       	movw	r30, r24
    25c4:	34 96       	adiw	r30, 0x04	; 4
    25c6:	80 81       	ld	r24, Z
    25c8:	8c 83       	std	Y+4, r24	; 0x04
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <KEYPAD_read+0x10e>
				/*Polling till switch released*/
				while(DIO_Low == DIO_ErrStateReadPinValuekey(KEYPAD_PORT, RowsArr[Local_u8RowCounter]))
				{
					Local_u8PressedKey = KeypadArray[Local_u8RowCounter][Local_u8ColCounter];
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	48 2f       	mov	r20, r24
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	22 0f       	add	r18, r18
    25de:	33 1f       	adc	r19, r19
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	82 0f       	add	r24, r18
    25e6:	93 1f       	adc	r25, r19
    25e8:	84 0f       	add	r24, r20
    25ea:	95 1f       	adc	r25, r21
    25ec:	fc 01       	movw	r30, r24
    25ee:	34 96       	adiw	r30, 0x04	; 4
    25f0:	80 81       	ld	r24, Z
    25f2:	8c 83       	std	Y+4, r24	; 0x04
			Local_u8KeyFlag = DIO_ErrStateReadPinValuekey(KEYPAD_PORT, RowsArr[Local_u8RowCounter]);
			if(DIO_Low == Local_u8KeyFlag)
			{
				Local_u8PressedKey = KeypadArray[Local_u8RowCounter][Local_u8ColCounter];
				/*Polling till switch released*/
				while(DIO_Low == DIO_ErrStateReadPinValuekey(KEYPAD_PORT, RowsArr[Local_u8RowCounter]))
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	ce 01       	movw	r24, r28
    25fc:	49 96       	adiw	r24, 0x19	; 25
    25fe:	fc 01       	movw	r30, r24
    2600:	e2 0f       	add	r30, r18
    2602:	f3 1f       	adc	r31, r19
    2604:	90 81       	ld	r25, Z
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	69 2f       	mov	r22, r25
    260a:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_ErrStateReadPinValuekey>
    260e:	88 23       	and	r24, r24
    2610:	e9 f2       	breq	.-70     	; 0x25cc <KEYPAD_read+0xe6>
				{
					Local_u8PressedKey = KeypadArray[Local_u8RowCounter][Local_u8ColCounter];
				}
				return Local_u8PressedKey;
    2612:	fc 81       	ldd	r31, Y+4	; 0x04
    2614:	fd 8f       	std	Y+29, r31	; 0x1d
    2616:	1e c0       	rjmp	.+60     	; 0x2654 <KEYPAD_read+0x16e>
	{
		/*Activate the current column by setting its value to low*/
		DIO_ErrStateSetPinValue(KEYPAD_PORT, ColumnsArr[Local_u8ColCounter], DIO_Low);

		/*Loop for the rows to get if any key is pressed*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_ROWS_NUM; Local_u8RowCounter++)
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	8a 83       	std	Y+2, r24	; 0x02
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	08 f4       	brcc	.+2      	; 0x2626 <KEYPAD_read+0x140>
    2624:	ad cf       	rjmp	.-166    	; 0x2580 <KEYPAD_read+0x9a>
			else{
				/*Do Nothing*/
			}
		}
		/*Deactivate the current column*/
		DIO_ErrStateSetPinValue(KEYPAD_PORT, ColumnsArr[Local_u8ColCounter], DIO_High);
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	ce 01       	movw	r24, r28
    262e:	45 96       	adiw	r24, 0x15	; 21
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	90 81       	ld	r25, Z
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	69 2f       	mov	r22, r25
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_ErrStateSetPinValue>

	u8 KeypadArray[KEYPAD_ROWS_NUM][KEYPAD_COLS_NUM] = KEYPAD_ARR_VAL;
	u8 ColumnsArr[KEYPAD_COLS_NUM] = {KEYPAD_COLUMN0_PIN, KEYPAD_COLUMN1_PIN, KEYPAD_COLUMN2_PIN, KEYPAD_COLUMN3_PIN};
	u8 RowsArr[KEYPAD_ROWS_NUM]    = {KEYPAD_ROW0_PIN, KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN};

	for(Local_u8ColCounter = 0; Local_u8ColCounter < KEYPAD_COLS_NUM; Local_u8ColCounter++)
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	8f 5f       	subi	r24, 0xFF	; 255
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	84 30       	cpi	r24, 0x04	; 4
    264c:	08 f4       	brcc	.+2      	; 0x2650 <KEYPAD_read+0x16a>
    264e:	88 cf       	rjmp	.-240    	; 0x2560 <KEYPAD_read+0x7a>
			}
		}
		/*Deactivate the current column*/
		DIO_ErrStateSetPinValue(KEYPAD_PORT, ColumnsArr[Local_u8ColCounter], DIO_High);
	}
	return Local_u8PressedKey;
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	8d 8f       	std	Y+29, r24	; 0x1d
    2654:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2656:	a2 96       	adiw	r28, 0x22	; 34
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <main>:
static u8 h=0;
static u8 x=0;
static u16 counter;
Lcd_Info Lcd1={DIO_GroupA,DIO_GroupA,DIO_GroupA,Pin2,Pin1,Pin0,DIO_GroupC};
int main(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(TCCR0,CS00); // NO PRESCALER
    2670:	a3 e5       	ldi	r26, 0x53	; 83
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e3 e5       	ldi	r30, 0x53	; 83
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	81 60       	ori	r24, 0x01	; 1
    267c:	8c 93       	st	X, r24
	Set_Bit(TCCR0,FOC0);
    267e:	a3 e5       	ldi	r26, 0x53	; 83
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e3 e5       	ldi	r30, 0x53	; 83
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 68       	ori	r24, 0x80	; 128
    268a:	8c 93       	st	X, r24

	Set_Bit(TIMSK,TOIE0); // enable timer ov interrupt
    268c:	a9 e5       	ldi	r26, 0x59	; 89
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e9 e5       	ldi	r30, 0x59	; 89
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	81 60       	ori	r24, 0x01	; 1
    2698:	8c 93       	st	X, r24
	Set_Bit(SREG, 7); // enable global interrupt
    269a:	af e5       	ldi	r26, 0x5F	; 95
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	ef e5       	ldi	r30, 0x5F	; 95
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	80 68       	ori	r24, 0x80	; 128
    26a6:	8c 93       	st	X, r24

	Lcd_VoidInit(&Lcd1);
    26a8:	8a e7       	ldi	r24, 0x7A	; 122
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <Lcd_VoidInit>
	Lcd_VoidGoXY(&Lcd1,0,1);
    26b0:	8a e7       	ldi	r24, 0x7A	; 122
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
	Lcd_VoidSendString("welcome",&Lcd1);
    26bc:	80 e6       	ldi	r24, 0x60	; 96
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	2a e7       	ldi	r18, 0x7A	; 122
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	b9 01       	movw	r22, r18
    26c6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <Lcd_VoidSendString>
    26ca:	ff cf       	rjmp	.-2      	; 0x26ca <main+0x62>

000026cc <__vector_11>:
	}

}

ISR(TIMER0_OVF_vect)
{
    26cc:	1f 92       	push	r1
    26ce:	0f 92       	push	r0
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	0f 92       	push	r0
    26d4:	11 24       	eor	r1, r1
    26d6:	2f 93       	push	r18
    26d8:	3f 93       	push	r19
    26da:	4f 93       	push	r20
    26dc:	5f 93       	push	r21
    26de:	6f 93       	push	r22
    26e0:	7f 93       	push	r23
    26e2:	8f 93       	push	r24
    26e4:	9f 93       	push	r25
    26e6:	af 93       	push	r26
    26e8:	bf 93       	push	r27
    26ea:	ef 93       	push	r30
    26ec:	ff 93       	push	r31
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62

		if(sec<59)
    26f6:	80 91 92 00 	lds	r24, 0x0092
    26fa:	8b 33       	cpi	r24, 0x3B	; 59
    26fc:	08 f0       	brcs	.+2      	; 0x2700 <__vector_11+0x34>
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <__vector_11+0xb2>
		{
			sec++;
    2700:	80 91 92 00 	lds	r24, 0x0092
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	80 93 92 00 	sts	0x0092, r24
			if(sec<10){
    270a:	80 91 92 00 	lds	r24, 0x0092
    270e:	8a 30       	cpi	r24, 0x0A	; 10
    2710:	c8 f4       	brcc	.+50     	; 0x2744 <__vector_11+0x78>
				Lcd_VoidGoXY(&Lcd1,0,6);
    2712:	8a e7       	ldi	r24, 0x7A	; 122
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	46 e0       	ldi	r20, 0x06	; 6
    271a:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				Lcd_VoidGoXY(&Lcd1,0,7);
    271e:	8a e7       	ldi	r24, 0x7A	; 122
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	47 e0       	ldi	r20, 0x07	; 7
    2726:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				LCD_voidSendNumber(&Lcd1,x);
    272a:	80 91 95 00 	lds	r24, 0x0095
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	8a e7       	ldi	r24, 0x7A	; 122
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	ba 01       	movw	r22, r20
    273c:	a9 01       	movw	r20, r18
    273e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidSendNumber>
    2742:	a7 c0       	rjmp	.+334    	; 0x2892 <__vector_11+0x1c6>
			}
			else if(sec>10 && sec<60)
    2744:	80 91 92 00 	lds	r24, 0x0092
    2748:	8b 30       	cpi	r24, 0x0B	; 11
    274a:	08 f4       	brcc	.+2      	; 0x274e <__vector_11+0x82>
    274c:	a2 c0       	rjmp	.+324    	; 0x2892 <__vector_11+0x1c6>
    274e:	80 91 92 00 	lds	r24, 0x0092
    2752:	8c 33       	cpi	r24, 0x3C	; 60
    2754:	08 f0       	brcs	.+2      	; 0x2758 <__vector_11+0x8c>
    2756:	9d c0       	rjmp	.+314    	; 0x2892 <__vector_11+0x1c6>
			{
				Lcd_VoidGoXY(&Lcd1,0,6);
    2758:	8a e7       	ldi	r24, 0x7A	; 122
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	46 e0       	ldi	r20, 0x06	; 6
    2760:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				LCD_voidSendNumber(&Lcd1,x);
    2764:	80 91 95 00 	lds	r24, 0x0095
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	8a e7       	ldi	r24, 0x7A	; 122
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	ba 01       	movw	r22, r20
    2776:	a9 01       	movw	r20, r18
    2778:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidSendNumber>
    277c:	8a c0       	rjmp	.+276    	; 0x2892 <__vector_11+0x1c6>
			}
		}
		else if(min<59 && sec==59)
    277e:	80 91 93 00 	lds	r24, 0x0093
    2782:	8b 33       	cpi	r24, 0x3B	; 59
    2784:	08 f0       	brcs	.+2      	; 0x2788 <__vector_11+0xbc>
    2786:	5d c0       	rjmp	.+186    	; 0x2842 <__vector_11+0x176>
    2788:	80 91 92 00 	lds	r24, 0x0092
    278c:	8b 33       	cpi	r24, 0x3B	; 59
    278e:	09 f0       	breq	.+2      	; 0x2792 <__vector_11+0xc6>
    2790:	58 c0       	rjmp	.+176    	; 0x2842 <__vector_11+0x176>
		{
			sec=0;
    2792:	10 92 92 00 	sts	0x0092, r1
			Lcd_VoidGoXY(&Lcd1,0,6);
    2796:	8a e7       	ldi	r24, 0x7A	; 122
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	46 e0       	ldi	r20, 0x06	; 6
    279e:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
			Lcd_VoidGoXY(&Lcd1,0,7);
    27a2:	8a e7       	ldi	r24, 0x7A	; 122
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	47 e0       	ldi	r20, 0x07	; 7
    27aa:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
			LCD_voidSendNumber(&Lcd1,sec);
    27ae:	80 91 92 00 	lds	r24, 0x0092
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	8a e7       	ldi	r24, 0x7A	; 122
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	ba 01       	movw	r22, r20
    27c0:	a9 01       	movw	r20, r18
    27c2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidSendNumber>
			min++;
    27c6:	80 91 93 00 	lds	r24, 0x0093
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 93 00 	sts	0x0093, r24
			if(min<10){
    27d0:	80 91 93 00 	lds	r24, 0x0093
    27d4:	8a 30       	cpi	r24, 0x0A	; 10
    27d6:	c8 f4       	brcc	.+50     	; 0x280a <__vector_11+0x13e>
				Lcd_VoidGoXY(&Lcd1,0,6);
    27d8:	8a e7       	ldi	r24, 0x7A	; 122
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	46 e0       	ldi	r20, 0x06	; 6
    27e0:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				Lcd_VoidGoXY(&Lcd1,0,7);
    27e4:	8a e7       	ldi	r24, 0x7A	; 122
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	47 e0       	ldi	r20, 0x07	; 7
    27ec:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				LCD_voidSendNumber(&Lcd1,x);
    27f0:	80 91 95 00 	lds	r24, 0x0095
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	8a e7       	ldi	r24, 0x7A	; 122
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	ba 01       	movw	r22, r20
    2802:	a9 01       	movw	r20, r18
    2804:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidSendNumber>
    2808:	44 c0       	rjmp	.+136    	; 0x2892 <__vector_11+0x1c6>
			}
			else if(min>10 && min<60)
    280a:	80 91 93 00 	lds	r24, 0x0093
    280e:	8b 30       	cpi	r24, 0x0B	; 11
    2810:	08 f4       	brcc	.+2      	; 0x2814 <__vector_11+0x148>
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <__vector_11+0x1c6>
    2814:	80 91 93 00 	lds	r24, 0x0093
    2818:	8c 33       	cpi	r24, 0x3C	; 60
    281a:	d8 f5       	brcc	.+118    	; 0x2892 <__vector_11+0x1c6>
			{
				Lcd_VoidGoXY(&Lcd1,0,6);
    281c:	8a e7       	ldi	r24, 0x7A	; 122
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	46 e0       	ldi	r20, 0x06	; 6
    2824:	0e 94 0a 11 	call	0x2214	; 0x2214 <Lcd_VoidGoXY>
				LCD_voidSendNumber(&Lcd1,x);
    2828:	80 91 95 00 	lds	r24, 0x0095
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	8a e7       	ldi	r24, 0x7A	; 122
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	ba 01       	movw	r22, r20
    283a:	a9 01       	movw	r20, r18
    283c:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_voidSendNumber>
    2840:	28 c0       	rjmp	.+80     	; 0x2892 <__vector_11+0x1c6>
			}

		}
		else if(h<23 && min==59 && sec ==59)
    2842:	80 91 94 00 	lds	r24, 0x0094
    2846:	87 31       	cpi	r24, 0x17	; 23
    2848:	90 f4       	brcc	.+36     	; 0x286e <__vector_11+0x1a2>
    284a:	80 91 93 00 	lds	r24, 0x0093
    284e:	8b 33       	cpi	r24, 0x3B	; 59
    2850:	71 f4       	brne	.+28     	; 0x286e <__vector_11+0x1a2>
    2852:	80 91 92 00 	lds	r24, 0x0092
    2856:	8b 33       	cpi	r24, 0x3B	; 59
    2858:	51 f4       	brne	.+20     	; 0x286e <__vector_11+0x1a2>
		{
			min=0;
    285a:	10 92 93 00 	sts	0x0093, r1
			sec=0;
    285e:	10 92 92 00 	sts	0x0092, r1
			h++;
    2862:	80 91 94 00 	lds	r24, 0x0094
    2866:	8f 5f       	subi	r24, 0xFF	; 255
    2868:	80 93 94 00 	sts	0x0094, r24
    286c:	12 c0       	rjmp	.+36     	; 0x2892 <__vector_11+0x1c6>
		}
		else if(h==23 && min==59 &&sec==59)
    286e:	80 91 94 00 	lds	r24, 0x0094
    2872:	87 31       	cpi	r24, 0x17	; 23
    2874:	71 f4       	brne	.+28     	; 0x2892 <__vector_11+0x1c6>
    2876:	80 91 93 00 	lds	r24, 0x0093
    287a:	8b 33       	cpi	r24, 0x3B	; 59
    287c:	51 f4       	brne	.+20     	; 0x2892 <__vector_11+0x1c6>
    287e:	80 91 92 00 	lds	r24, 0x0092
    2882:	8b 33       	cpi	r24, 0x3B	; 59
    2884:	31 f4       	brne	.+12     	; 0x2892 <__vector_11+0x1c6>
		{
			h=0;
    2886:	10 92 94 00 	sts	0x0094, r1
			min=0;
    288a:	10 92 93 00 	sts	0x0093, r1
			sec=0;
    288e:	10 92 92 00 	sts	0x0092, r1
		}
		counter=0;
    2892:	10 92 97 00 	sts	0x0097, r1
    2896:	10 92 96 00 	sts	0x0096, r1

	}
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	ff 91       	pop	r31
    28a0:	ef 91       	pop	r30
    28a2:	bf 91       	pop	r27
    28a4:	af 91       	pop	r26
    28a6:	9f 91       	pop	r25
    28a8:	8f 91       	pop	r24
    28aa:	7f 91       	pop	r23
    28ac:	6f 91       	pop	r22
    28ae:	5f 91       	pop	r21
    28b0:	4f 91       	pop	r20
    28b2:	3f 91       	pop	r19
    28b4:	2f 91       	pop	r18
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	0f 90       	pop	r0
    28bc:	1f 90       	pop	r1
    28be:	18 95       	reti

000028c0 <__mulsi3>:
    28c0:	62 9f       	mul	r22, r18
    28c2:	d0 01       	movw	r26, r0
    28c4:	73 9f       	mul	r23, r19
    28c6:	f0 01       	movw	r30, r0
    28c8:	82 9f       	mul	r24, r18
    28ca:	e0 0d       	add	r30, r0
    28cc:	f1 1d       	adc	r31, r1
    28ce:	64 9f       	mul	r22, r20
    28d0:	e0 0d       	add	r30, r0
    28d2:	f1 1d       	adc	r31, r1
    28d4:	92 9f       	mul	r25, r18
    28d6:	f0 0d       	add	r31, r0
    28d8:	83 9f       	mul	r24, r19
    28da:	f0 0d       	add	r31, r0
    28dc:	74 9f       	mul	r23, r20
    28de:	f0 0d       	add	r31, r0
    28e0:	65 9f       	mul	r22, r21
    28e2:	f0 0d       	add	r31, r0
    28e4:	99 27       	eor	r25, r25
    28e6:	72 9f       	mul	r23, r18
    28e8:	b0 0d       	add	r27, r0
    28ea:	e1 1d       	adc	r30, r1
    28ec:	f9 1f       	adc	r31, r25
    28ee:	63 9f       	mul	r22, r19
    28f0:	b0 0d       	add	r27, r0
    28f2:	e1 1d       	adc	r30, r1
    28f4:	f9 1f       	adc	r31, r25
    28f6:	bd 01       	movw	r22, r26
    28f8:	cf 01       	movw	r24, r30
    28fa:	11 24       	eor	r1, r1
    28fc:	08 95       	ret

000028fe <__udivmodsi4>:
    28fe:	a1 e2       	ldi	r26, 0x21	; 33
    2900:	1a 2e       	mov	r1, r26
    2902:	aa 1b       	sub	r26, r26
    2904:	bb 1b       	sub	r27, r27
    2906:	fd 01       	movw	r30, r26
    2908:	0d c0       	rjmp	.+26     	; 0x2924 <__udivmodsi4_ep>

0000290a <__udivmodsi4_loop>:
    290a:	aa 1f       	adc	r26, r26
    290c:	bb 1f       	adc	r27, r27
    290e:	ee 1f       	adc	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	a2 17       	cp	r26, r18
    2914:	b3 07       	cpc	r27, r19
    2916:	e4 07       	cpc	r30, r20
    2918:	f5 07       	cpc	r31, r21
    291a:	20 f0       	brcs	.+8      	; 0x2924 <__udivmodsi4_ep>
    291c:	a2 1b       	sub	r26, r18
    291e:	b3 0b       	sbc	r27, r19
    2920:	e4 0b       	sbc	r30, r20
    2922:	f5 0b       	sbc	r31, r21

00002924 <__udivmodsi4_ep>:
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	88 1f       	adc	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	1a 94       	dec	r1
    292e:	69 f7       	brne	.-38     	; 0x290a <__udivmodsi4_loop>
    2930:	60 95       	com	r22
    2932:	70 95       	com	r23
    2934:	80 95       	com	r24
    2936:	90 95       	com	r25
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	bd 01       	movw	r22, r26
    293e:	cf 01       	movw	r24, r30
    2940:	08 95       	ret

00002942 <__divmodsi4>:
    2942:	97 fb       	bst	r25, 7
    2944:	09 2e       	mov	r0, r25
    2946:	05 26       	eor	r0, r21
    2948:	0e d0       	rcall	.+28     	; 0x2966 <__divmodsi4_neg1>
    294a:	57 fd       	sbrc	r21, 7
    294c:	04 d0       	rcall	.+8      	; 0x2956 <__divmodsi4_neg2>
    294e:	d7 df       	rcall	.-82     	; 0x28fe <__udivmodsi4>
    2950:	0a d0       	rcall	.+20     	; 0x2966 <__divmodsi4_neg1>
    2952:	00 1c       	adc	r0, r0
    2954:	38 f4       	brcc	.+14     	; 0x2964 <__divmodsi4_exit>

00002956 <__divmodsi4_neg2>:
    2956:	50 95       	com	r21
    2958:	40 95       	com	r20
    295a:	30 95       	com	r19
    295c:	21 95       	neg	r18
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	4f 4f       	sbci	r20, 0xFF	; 255
    2962:	5f 4f       	sbci	r21, 0xFF	; 255

00002964 <__divmodsi4_exit>:
    2964:	08 95       	ret

00002966 <__divmodsi4_neg1>:
    2966:	f6 f7       	brtc	.-4      	; 0x2964 <__divmodsi4_exit>
    2968:	90 95       	com	r25
    296a:	80 95       	com	r24
    296c:	70 95       	com	r23
    296e:	61 95       	neg	r22
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8f 4f       	sbci	r24, 0xFF	; 255
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	08 95       	ret

00002978 <__prologue_saves__>:
    2978:	2f 92       	push	r2
    297a:	3f 92       	push	r3
    297c:	4f 92       	push	r4
    297e:	5f 92       	push	r5
    2980:	6f 92       	push	r6
    2982:	7f 92       	push	r7
    2984:	8f 92       	push	r8
    2986:	9f 92       	push	r9
    2988:	af 92       	push	r10
    298a:	bf 92       	push	r11
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	ca 1b       	sub	r28, r26
    29a2:	db 0b       	sbc	r29, r27
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	09 94       	ijmp

000029b0 <__epilogue_restores__>:
    29b0:	2a 88       	ldd	r2, Y+18	; 0x12
    29b2:	39 88       	ldd	r3, Y+17	; 0x11
    29b4:	48 88       	ldd	r4, Y+16	; 0x10
    29b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    29bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29be:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29c2:	b9 84       	ldd	r11, Y+9	; 0x09
    29c4:	c8 84       	ldd	r12, Y+8	; 0x08
    29c6:	df 80       	ldd	r13, Y+7	; 0x07
    29c8:	ee 80       	ldd	r14, Y+6	; 0x06
    29ca:	fd 80       	ldd	r15, Y+5	; 0x05
    29cc:	0c 81       	ldd	r16, Y+4	; 0x04
    29ce:	1b 81       	ldd	r17, Y+3	; 0x03
    29d0:	aa 81       	ldd	r26, Y+2	; 0x02
    29d2:	b9 81       	ldd	r27, Y+1	; 0x01
    29d4:	ce 0f       	add	r28, r30
    29d6:	d1 1d       	adc	r29, r1
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	ed 01       	movw	r28, r26
    29e4:	08 95       	ret

000029e6 <_exit>:
    29e6:	f8 94       	cli

000029e8 <__stop_program>:
    29e8:	ff cf       	rjmp	.-2      	; 0x29e8 <__stop_program>
